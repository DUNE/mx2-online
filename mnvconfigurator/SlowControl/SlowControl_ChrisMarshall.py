"""
MINERvA DAQ Slow Control GUI
By Chris Marshall
Last modified 6 August, 2009
"""
# wx is the module for wxPython. The string library is used for saving and loading settings to/from files.
# sys is necessary for redirecting print statements to the Description tab rather than the terminal.
import wx
import string
import sys
# feb is the module for the Front End Board class, wrapped in SWIG, for the C++ readout library.
###import feb
# Note: this will raise an error unless you have the SWIG-generated feb.py file in the same directory
# as this program.

class SCTree(wx.Frame):
    def __init__(self):
        """Creates the main Frame of the SlowControl, instantiates the Tree and Notebook objects and holds
        functions that save and load settings and control the operation of the GUI."""
        wx.Frame.__init__(self, None, -1, "MINERvA Slow Control", size = (1000, 600))
        # The Tree and the Notebook are children of this wx.Panel object.
        panel = wx.Panel(self, -1, size = (1000, 600), pos = (0, 0))
        # Instantiating the Notebook page objects here, so that the Tree can access self.nb.
        self.nb = wx.Notebook(panel, -1, size = (700, 600), pos = (300, 0))
        descrip = Description(self.nb, -1)
        self.nb.AddPage(descrip, "Description")
        self.vme = VME(self.nb, -1)
        self.nb.AddPage(self.vme, "VME")
        self.crim = CRIM(self.nb, -1)
        self.nb.AddPage(self.crim, "CRIM")
        self.croc = CROC(self.nb, -1)
        self.nb.AddPage(self.croc, "CROC")
        self.ch = CH(self.nb, -1)
        self.nb.AddPage(self.ch, "CH")
        self.fpga = FPGA(self.nb, -1, self.nb)
        self.nb.AddPage(self.fpga, "FPGA Regs")
        self.trip = TRIP(self.nb, -1)
        self.nb.AddPage(self.trip, "TRIP Regs")
        self.flash = FLASH(self.nb, -1)
        self.nb.AddPage(self.flash, "FLASH")
        self.readhv = ReadHV(self.nb, -1)
        self.nb.AddPage(self.readhv, "Read HV")
        self.libox = LIBox(self.nb, -1)
        self.nb.AddPage(self.libox, "LI Box")

        # These functions are called when a user clicks a new tab in the Notebook.
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.changeTab, self.nb)
        self.nb.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.prevTab)

        # Creates the top menu.
        menuFile = wx.Menu()
        menuFile.Append(1, "Local Hardware")
        menuFile.Append(2, "Load from File")
        menuFile.Append(3, "Save to File")
        # Clicks to these options are bound to functions.
        self.Bind(wx.EVT_MENU, self.localHardware, id = 1)
        self.Bind(wx.EVT_MENU, self.loadFile, id = 2)
        self.Bind(wx.EVT_MENU, self.saveFile, id = 3)
        menuShow = wx.Menu()
        menuShow.Append(5, "Expand All")
        menuShow.Append(6, "Collapse All")
        self.Bind(wx.EVT_MENU, self.expandAll, id = 5)
        self.Bind(wx.EVT_MENU, self.collapseAll, id = 6)
        menuActions = wx.Menu()
        menuActions.Append(10, "Read Voltages")
        menuActions.Append(11, "Zero HV All")
        menuActions.Append(12, "Monitor Voltages")
        menuActions.Append(13, "Light Injection")
        self.Bind(wx.EVT_MENU, self.readVoltages, id = 10)
        self.Bind(wx.EVT_MENU, self.zeroHVAll, id = 11)
        self.Bind(wx.EVT_MENU, self.monitorVoltages, id = 12)
        self.Bind(wx.EVT_MENU, self.lightInject, id = 13)
        menuBar = wx.MenuBar()
        menuBar.Append(menuFile, "File")
        menuBar.Append(menuShow, "Show")
        menuBar.Append(menuActions, "Actions")
        self.SetMenuBar(menuBar)

        # Creates the tree.
        # Will use wx.HIDE_ROOT for multiple CRIMS.  For now just one Crim, so no need.
        self.tree = wx.TreeCtrl(panel, style = wx.TR_DEFAULT_STYLE | wx.TR_EDIT_LABELS, size = (300, 559), pos = (0, 0))
        self.tree.SetBackgroundColour('wheat')

        # Creates the root node and sets its data.
        # Eventually, an invisible "master" is the root, and the CRIMs are its immediate children.
        self.root = self.tree.AddRoot("Crim 255")
        self.tree.SetItemPyData(self.root, None)
        
        # These lists will eventually be generated by the hardwareLoad function.
        # For now, they are just arbitrary lists of CROCs, Channels and FEBs.
        tree = ["Croc 1", "Croc 2", "Croc 3", "Croc 4", "Croc 5", "Croc 6", "Croc 7"]
        crocs = [None for i in range(7)]
        for i in range(1, 8):
            crocs[i - 1] = ["Croc " + str(i) + ": Ch 1", "Croc " + str(i) + ": Ch 2", "Croc " + str(i) + ": Ch 3", "Croc " + str(i) + ": Ch 4"]
        fes = ["FEB1", "FEB2", "FEB3", "FEB4", "FEB5", "FEB6", "FEB7", "FEB8", "FEB9", "FEB10", "FEB11", "FEB12", "FEB13", "FEB14", "FEB15", "FEB16", "FEB17", "FEB18", "FEB19", "FEB20",
               "FEB21", "FEB22", "FEB23", "FEB24", "FEB25", "FEB26", "FEB27", "FEB28"]
        eachFE = ["FPGA", "TRIP", "FLASH"]

        # Adds all of the CROCs, Channels, FEBs and chips to the tree.  Later, this will be done by a function
        # that takes the output of the hardware search as its input and creates the tree.
        self.AddTreeNodes(self.root, tree)
        last = self.tree.GetLastChild(self.root)
        for i in range(7):
            self.AddTreeNodes(last, crocs[6 - i])
            currentchild = self.tree.GetLastChild(last)
            for j in range(4):
                self.AddTreeNodes(currentchild, [fes[27 - (4 * i + j)]])
                grandbaby = self.tree.GetLastChild(currentchild)
                for k in range(1):
                    self.AddTreeNodes(grandbaby, eachFE)
                    grandbaby = self.tree.GetPrevSibling(grandbaby)
                currentchild = self.tree.GetPrevSibling(currentchild)
            last = self.tree.GetPrevSibling(last)
        
        # Expands the tree's root node only.  Could expand the whole thing or any part.
        self.tree.Expand(self.root)

        # Binds functions to changes in the selected object in the tree. The prefered method of navigating the GUI.
        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.treeClick, self.tree)
        self.tree.Bind(wx.EVT_TREE_SEL_CHANGING, self.prevTreeElement)
        self.first = True

        # Searches for hardware automatically when the SlowControl is brought up. This call will produce
        # a list of all FEB's it found, boardList.
        self.hardwareLoad()

    def treeClick(self, event):
        """The callback for clicks to the tree. Changes the selected Notebook page according to tree clicks
        and instructs Notebook pages to draw the appropriate top label."""
        # obj is the new selection in the tree, and item is its text.
        obj = self.tree.GetSelection()
        item = self.tree.GetItemText(self.tree.GetSelection())
        if item[0:4] == 'Crim':
            self.nb.ChangeSelection(2)
            self.crim.drawTop(item[5:])
        elif item[8:10] == 'Ch':
            self.nb.ChangeSelection(4)
            self.ch.drawChTop((item[11], item[5]))
            self.ch.drawRegister(True, False)
        elif item[0:4] == 'Croc':
            self.nb.ChangeSelection(3)
            # Calls to the drawTop functions also set the crocTop and numInfo variables.
            self.croc.drawCrocTop(item[5:])
            self.croc.setFields()
        elif item[0:3] == 'FEB':
            self.nb.ChangeSelection(0)
        elif item == 'FPGA':
            self.nb.ChangeSelection(5)
            # Gets information on CROC, Ch and FEB to display on the FPGA Regs page.
            feb = self.tree.GetItemParent(obj)
            febtxt = self.tree.GetItemText(feb)
            ch = self.tree.GetItemParent(feb)
            chtxt = self.tree.GetItemText(ch)
            croc = self.tree.GetItemParent(ch)
            croctxt = self.tree.GetItemText(croc)
            self.fpga.drawFPGATop((febtxt[3:], chtxt[11], croctxt[5:]))
            self.fpga.setFields()
        elif item == 'TRIP':
            self.nb.ChangeSelection(6)
            feb = self.tree.GetItemParent(obj)
            febtxt = self.tree.GetItemText(feb)
            ch = self.tree.GetItemParent(feb)
            chtxt = self.tree.GetItemText(ch)
            croc = self.tree.GetItemParent(ch)
            croctxt = self.tree.GetItemText(croc)
            self.trip.drawTRIPTop((febtxt[3:], chtxt[11], croctxt[5:]))
            self.trip.setFields()
        elif item == 'FLASH':
            self.nb.ChangeSelection(7)
            feb = self.tree.GetItemParent(obj)
            febtxt = self.tree.GetItemText(feb)
            ch = self.tree.GetItemParent(feb)
            chtxt = self.tree.GetItemText(ch)
            croc = self.tree.GetItemParent(ch)
            croctxt = self.tree.GetItemText(croc)
            self.flash.drawFLASHTop((febtxt[3:], chtxt[11], croctxt[5:]))

    def AddTreeNodes(self, parentItem, items):
        """Creates tree objects for items and adds them to the tree with parent parentItem."""
        for item in items:
            if type(item) == str:
                newItem = self.tree.AppendItem(parentItem, item)
                self.tree.SetItemPyData(newItem, None)
            else:
                newItem = self.tree.AppendItem(parentItem, item[0])
                self.tree.SetItemPyData(newItem, None)   
                self.AddTreeNodes(newItem, item[1])

    def prevTreeElement(self, event):
        """A tree click callback. When a tree click leaves a Notebook page, saves all settings on that page."""
        if not self.first:
            # old is the tree item that is left with a click.
            old = self.tree.GetItemText(self.tree.GetSelection())
            if old[8:10] == 'Ch':
                pass
            # setSettings() saves the information on the page to the self.settings dictionary.
            elif old[0:4] == 'Croc':
                self.croc.setSettings()
            elif old[0:4] == 'FPGA':
                self.fpga.setSettings()
            elif old[0:4] == 'TRIP':
                self.trip.setSettings()
        else:
            self.first = False

    def changeTab(self, event):
        """Clears the Read HV tab when a user clicks the tab. This tab should be accessed by the Read Voltages
        and Monitor Voltages options in the actions menu instead."""
        if self.nb.GetSelection() == 8:
            self.readhv.clear()

    def prevTab(self, event):
        """Called when a user clicks a Notebook tab. Saves the information on the previous tab."""
        old = self.nb.GetSelection()
        if old == 3:
            self.croc.setSettings()
        elif old == 5:
            self.fpga.setSettings()
        elif old == 6:
            self.trip.setSettings()

    def localHardware(self, event):
        """The callback for the Hardware Load option in the File menu. Calls hardwareLoad()."""
        self.hardwareLoad()

    def saveFile(self, event):
        """The callback for the Save to File option in the File menu. Pulls up a Dialog that requests a name
        for the file. Writes all current data in the GUI to this file in a human-readable fashion."""
        fpgaData = self.fpga.getSettings()
        crocData = self.croc.getSettings()
        tripData = self.trip.getSettings()
        dialog = wx.TextEntryDialog(None, "Enter a name for the file (omit the .txt extension):", "Save to File", defaultValue = '')
        dialog.ShowModal()
        name = dialog.GetValue()
        dialog.Destroy()
        if name != '':
            fileName = name + '.txt'
            datafile = open(fileName, 'w')
        crocList = ['Timing Setup 1', 'Timing Setup 2', 'Fast Command', 'Reset Ch 1', 'Reset Ch 2', 'Reset Ch 3',
                    'Reset Ch 4', 'TPulse Ch 1', 'TPulse Ch 2', 'TPulse Ch 3', 'TPulse Ch 4', '# Of Measurements',
                    'Load Timer Value', 'Gate Start Value']
        fpgaList = ['WR Timer', 'WR Gate Start', 'WR Gate Length', 'WR Trip PowOFF',
                        'WR Trip0 InjCnt+EN', 'WR Trip1 InjCnt+EN', 'WR Trip2 InjCnt+EN',
                        'WR Trip3 InjCnt+EN', 'WR Trip4 InjCnt+EN', 'WR Trip5 InjCnt+EN',
                        'WR TripX InjRange', 'WR TripX InjPhase', 'WR InjDAC Value', 'WR InjDAC Mode',
                        'WR InjDAC RS', 'R InjDAC Done', 'WR HV Enable', 'WR HV Target', 'R HV Actual',
                        'R HV Control', 'WR HV Auto/Man', 'WR VXO PLL Sal', 'WR PHASE RS', 'WR PHASE +/-',
                        'WR PHASE Spare', 'WR PHASE Ticks', 'R DCM1 LOCK', 'R DCM2 LOCK', 'R DCM1 NoCLK',
                        'R DCM2 NoCLK', 'R DCM2 PHDone', 'R DCM2 PHTotal', 'R TP Count2b', 'R TP Count',
                        'R MyBoardID', 'R Version', 'WR HV NumAvg', 'WR HV PeriodMan', 'R HV PeriodAuto',
                        'WR HV PulseWidth', 'R Temperature', 'WR TripXThreshold', 'R TripXComparators',
                        'R ExtTriggFound', 'WR ExtTriggRearm', 'WR DM_T0 0x', 'WR DM_T1 0x', 'WR DM_T2 0x',
                        'WR DM_T3 0x', 'R GateTimeStamp']
        tripList = ['IBP', 'IBBNFALL', 'IFF', 'IBPIFF1REF', 'IBPOPAMP', 'IB_T', 'IFFP2', 'IBCOMP', 'VREF', 'VTH',
                    'GAIN', 'PIPEDEL', 'IRSEL', 'IWSEL', 'INJEX0', 'INJB0', 'INJB1', 'INJB2', 'INJB3', 'INJEX33']
        # Eventually, these lists should be generated by the hardware scan.
        listofCROCs = [1, 2, 3, 4, 5, 6, 7]
        listofFEBs = [i for i in range(1, 29)]
        listofTRIPs = [i for i in range(1, 29)]
        # Writes to the file a line for every variable in the form VARIABLE = <VALUE> = <TYPE> (str if no type listed).
        for croc in listofCROCs:
            line = "Data for CROC " + str(croc) + "\n"
            datafile.write(line)
            for i in range(14):
                if type(crocData[croc][i]) == int:
                    line = crocList[i] + ' = ' + str(crocData[croc][i]) + ' = int\n'
                elif type(crocData[croc][i]) == bool:
                    line = crocList[i] + ' = ' + str(crocData[croc][i]) + ' = bool\n'
                else:
                    line = crocList[i] + ' = ' + str(crocData[croc][i]) + '\n'
                datafile.write(line)
        datafile.write('\n')
        for feb in listofFEBs:
            line = "Data for FPGA chip, FEB " + str(feb) + "\n"
            datafile.write(line)
            for i in range(50):
                if type(fpgaData[feb][i]) == int:
                    line = fpgaList[i] + ' = ' + str(fpgaData[feb][i]) + ' = int\n'
                else:
                    line = fpgaList[i] + ' = ' + fpgaData[feb][i] + '\n'
                datafile.write(line)
        datafile.write('\n')
        for trip in listofTRIPs:
            line = "Data for TRIP chips, FEB " + str(trip) + "\n"
            datafile.write(line)
            for i in range(6):
                line = "TRIP " + str(i) + "\n"
                datafile.write(line)
                for j in range(20):
                    line = tripList[j] + ' = ' + str(tripData[trip][i][j]) + '\n'
                    datafile.write(line)
        datafile.write('\n')
        datafile.close()

    def loadFile(self, event):
        """The callback for Load from File in the File menu. Essentailly inverts the saveFile function, extracting
        from a selected text file all information for the GUI."""
        dialog = wx.FileDialog(None, "Choose a file", style = wx.FD_OPEN)
        dialog.ShowModal()
        load = dialog.GetFilename()
        dialog.Destroy()
        datafile = open(load, 'r')
        # The info is stored in dictionaries, where the keys are CROC (for crocData) and FEB (the other two) numbers.
        fpgaData = {}
        crocData = {}
        tripData = {}
        current = None
        lines = datafile.readlines()
        line = 0
        while lines[line] != '\n':
            splitLine = string.split(lines[line], ' = ')
            if len(splitLine) == 2:
                crocData[current] = crocData[current] + [splitLine[1][:-1]]
            elif len(splitLine) == 3:
                if splitLine[-1] == 'bool\n':
                    if splitLine[1] == 'True':
                        crocData[current] = crocData[current] + [True]
                    else:
                        crocData[current] = crocData[current] + [False]
                else:
                    crocData[current] = crocData[current] + [int(splitLine[1])]
            else:
                words = string.split(splitLine[0])
                current = int(words[-1])
                crocData[current] = []
            line += 1
        line += 1
        while lines[line] != '\n':
            splitLine = string.split(lines[line], ' = ')
            if len(splitLine) == 2:
                # Then splitLine[1] is a string, we want all but the \n to go in the last list in fpgaData.
                fpgaData[current] = fpgaData[current] + [splitLine[1][:-1]]
            elif len(splitLine) == 3:
                # Then we want to make splitLine[1] and int.
                fpgaData[current] = fpgaData[current] + [int(splitLine[1])]
            else:
                # len == 1, a new FPGA chip, and thus a new list in fpgaData.
                words = string.split(splitLine[0])
                current = int(words[-1])
                fpgaData[current] = []
            line += 1
        line += 1
        currentTrip = None
        while lines[line] != '\n':
            splitLine = string.split(lines[line], ' = ')
            if len(splitLine) == 2:
                tripData[current][currentTrip] = tripData[current][currentTrip] + [splitLine[1][:-1]]
            else:
                words = string.split(splitLine[0])
                if words[0] == 'TRIP':
                    currentTrip = int(words[-1])
                else:
                    current = int(words[-1])
                    tripData[current] = [[], [], [], [], [], []]
            line += 1

        # passSettings sends the dictionaries to the appropriate Notebook pages.
        self.croc.passSettings(crocData)
        self.fpga.passSettings(fpgaData)
        self.trip.passSettings(tripData)
        datafile.close()

    def hardwareLoad(self):
        """Eventually, will perform the hardware scan. For now just sets arbitrary lists."""
        self.croc.setListOfCrocs([1, 2, 3, 4, 5, 6, 7])
        self.fpga.setListOfFEBs([i for i in range(1, 29)])
###        board13 = feb.feb(6, False, 13, 54)
        self.boardList = {}
###        self.boardList[13] = board13
        self.fpga.setBoardList(self.boardList)
        self.trip.setListOfFEBs([i for i in range(1, 29)])

    def expandAll(self, event):
        """Callback for the Expand All option in the Show menu. Expands the whole tree."""
        self.tree.ExpandAll()

    def collapseAll(self, event):
        """Callback for the Collapse All option in the Show menu. Collapses the whole tree."""
        self.tree.CollapseAll()

    def readVoltages(self, event):
        """Callback for the Read Voltages option in the Actions menu. Displays the Read HV info on the tab."""
        self.nb.ChangeSelection(8)
        self.readhv.clear()
        self.readhv.readVoltages()

    def zeroHVAll(self, event):
        """Prompts a dialog for confirmation. Currently does nothing; eventually will zero all HV."""
        dialog = wx.MessageDialog(None, 'WARNING\nYou are about to set HVTarget on all FEBs to zero.\nDo you wish to continue?',
                                  'Confirm Zero HVTarget on all FEBs', wx.YES_NO | wx.NO_DEFAULT | wx.ICON_EXCLAMATION)
        result = dialog.ShowModal()
        if result == wx.ID_YES:
            ### Set all HV to zero.
            print "All FEBs HVTarget = 0."
        dialog.Destroy()

    def monitorVoltages(self, event):
        """Callback for the Monitor Voltages option in the Actions menu. Displays the Monitor HV info on the tab."""
        self.nb.ChangeSelection(8)
        self.readhv.clear()
        self.readhv.monitorVoltages()

    def lightInject(self, event):
        """Callback for the Light Injection option in the Actions menu. Displays the LI Box tab."""
        self.nb.ChangeSelection(9)

class TextLabel:
    def __init__(self, parent, color, label, ID = -1, pos = wx.DefaultPosition, size = (135, 23), textpos = (1, 1)):
        """This class supports all pages. It creates boxed text cells of any color."""
        self.apanel = wx.Panel(parent, -1, pos, size, wx.NO_BORDER, "")
        self.apanel.SetMinSize(size)
        self.apanel.SetBackgroundColour(color)
        self.apanel.SetForegroundColour('black')
        self.text = wx.StaticText(self.apanel, -1, label, pos = textpos)

    def Destroy(self):
        """Calls the wx method Destroy() on all wx windows in the TextLabel."""
        self.text.Destroy()
        self.apanel.Destroy()

    def Hide(self):
        """Calls the wx method Hide() on all wx windows in the TextLabel."""
        self.text.Hide()
        self.apanel.Hide()

    def Show(self):
        """Calls the wx method Show() on all wx windows in the TextLabel."""
        self.text.Show()
        self.apanel.Show()

class Description(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the Description tab in the Notebook. All 'print' statements are redirected here by the supporting
        RedirectText class. It is impossible to print to the terminal in this program, but trivial to send a message
        to be displayed in the Description."""
        wx.Panel.__init__(self, parent, ID, size = (700, 600))
        # Some text in the tab, for now. Can be input directly or via a function call.
        self.descript = wx.wx.TextCtrl(self, -1, size = (600, 500), pos = (5, 5), style = wx.TE_READONLY | wx.TE_MULTILINE | wx.VSCROLL)
        redir = RedirectText(self.descript)
        sys.stdout = redir

class RedirectText:
    def __init__(self, description):
        """Supports the Description class, so that all 'print' statements will print to the Description page
        rather than to the terminal. This facilitates simple, easy coding of writing to the description tab."""
        self.out = description

    def write(self, string):
        self.out.WriteText(string)
        
class VME(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the VME tab in the Notebook."""
        wx.Panel.__init__(self, parent, ID, size = (400, 500))
        # The Write Read (hex) box.
        wx.StaticBox(self, -1, "Write Read (hex)", size = (200, 104), pos = (5, 5))
        addr = TextLabel(self, 'coral', 'Address', size = (60, 20), pos = (75, 24))
        data = TextLabel(self, 'coral', 'Data', size = (60, 20), pos = (140, 24))
        self.vmeRead = wx.Button(self, -1, "Read", size = (60, 26), pos = (10, 46))
        self.vmeRead.SetBackgroundColour('coral')
        self.vmeRead.Bind(wx.EVT_BUTTON, self.doVMEread)
        self.readAddrField = wx.TextCtrl(self, -1, '', size = (60, 20), pos = (75, 49))
        self.drawVMEreadout(True, '')
        self.VMEdict = {}
        self.vmeWrite = wx.Button(self, -1, "Write", size = (60, 26), pos = (10, 74))
        self.vmeWrite.SetBackgroundColour('coral')
        self.vmeWrite.Bind(wx.EVT_BUTTON, self.doVMEwrite)
        self.writeAddrField = wx.TextCtrl(self, -1, '', size = (60, 20), pos = (75, 77))
        self.writeDataField = wx.TextCtrl(self, -1, '', size = (60, 20), pos = (140, 77))

    def drawVMEreadout(self, first, txt):
        """Destroys the previous readout field, and draws a new one with txt as its text."""
        if not first:
            self.vmeReadout.Destroy()
        self.vmeReadout = TextLabel(self, 'wheat', txt, size = (60, 20), pos = (140, 48))

    def doVMEread(self, event):
        """For now, displays the value associated with the Addr in the dictionary, if there is one."""
        try:
            data = self.VMEdict[self.readAddrField.GetValue()]
            self.drawVMEreadout(False, data)
        except KeyError:
            self.drawVMEreadout(False, '')
        self.readAddrField.SetValue('')


    def doVMEwrite(self, event):
        """For now, a VME write takes the Data field and adds it to a dictionary with key of the Addr field."""
        self.VMEdict[self.writeAddrField.GetValue()] = self.writeDataField.GetValue()
        self.writeAddrField.SetValue('')
        self.writeDataField.SetValue('')

class TimingModule(wx.Panel):
    def __init__(self, parent, ID):
        """The Timing Module tab for the CRIM sub-notebook."""
        wx.Panel.__init__(self, parent, ID)
        wx.StaticText(self, -1, "This is the Timing Module.")

class DAQModule(wx.Panel):
    def __init__(self, parent, ID):
        """The DAQ Module tab for the CRIM sub-notebook."""
        wx.Panel.__init__(self, parent, ID)
        wx.StaticText(self, -1, "This is the DAQ Module.")

class InterrupterModule(wx.Panel):
    def __init__(self, parent, ID):
        """The Interrupter Module tab for the CRIM sub-notebook."""
        wx.Panel.__init__(self, parent, ID)
        wx.StaticText(self, -1, "This is the Interrupter Module.")

class FELoopQuery(wx.Panel):
    def __init__(self, parent, ID):
        """The FE Loop Query tab for the CRIM sub-notebook."""
        wx.Panel.__init__(self, parent, ID)
        wx.StaticText(self, -1, "This is the FE Loop Query.")

class CRIM(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the CRIM tab in the Notebook. This tab has a notebook inside of it with four tabs.
        In default mode, the sub-notebook is hidden."""
        wx.Panel.__init__(self, parent, ID, size = (700, 600))
        self.drawTop('')
        self.expand = False
        self.drawGUI()

    def drawGUI(self):
        """Creates the Advanced GUI and hides it. It is shown by a click to the toggle button."""
        toggleButton = 'Show Default GUI'
        self.nb = wx.Notebook(self, -1, size = (650, 498), pos = (5, 35))
        timing = TimingModule(self.nb, -1)
        self.nb.AddPage(timing, "Timing Module")
        daq = DAQModule(self.nb, -1)
        self.nb.AddPage(daq, "DAQ Module")
        interrupt = InterrupterModule(self.nb, -1)
        self.nb.AddPage(interrupt, "Interrupter Module")
        feloop = FELoopQuery(self.nb, -1)
        self.nb.AddPage(feloop, "FE Loop Query")
        self.nb.Hide()
        self.toggle = wx.Button(self, -1, 'Show Advanced GUI', size = (160, 26), pos = (100, 2))
        self.toggle.SetBackgroundColour('coral')
        self.toggle.Bind(wx.EVT_BUTTON, self.flopAndDraw) 

    def drawTop(self, info):
        """Creates the CRIM top label which displays the crim number."""
        self.top = [None for i in range(2)]
        self.top[0] = TextLabel(self, 'coral', 'CRIM', pos = (2, 5), size = (40, 20))
        self.top[1] = TextLabel(self, 'wheat', info, pos = (42, 5), size = (40, 20))

    def flopAndDraw(self, event):
        """A callback for the toggle button. Flops the value of self.expand, and shows or hides the advanced GUI."""
        if self.expand:
            self.nb.Hide()
            toggleButton = 'Show Advanced GUI'
        else:
            self.nb.Show()
            toggleButton = 'Show Default GUI'
        self.expand = not self.expand
        self.toggle.Destroy()
        self.toggle = wx.Button(self, -1, toggleButton, size = (160, 26), pos = (100, 2))
        self.toggle.SetBackgroundColour('coral')
        self.toggle.Bind(wx.EVT_BUTTON, self.flopAndDraw)
    
class CROC(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the CROC tab in the Notebook."""
        wx.Panel.__init__(self, parent, ID, size = (700, 600))
        # Initially, the CROC number is None. It is set by clicking a Croc in the tree.
        self.crocNum = None
        # Initializes the settings dictionary. The keys will be the CROC numbers.
        self.settings = {}
        # The initial top label.
        self.top = [None for i in range(6)]
        self.top[0] = TextLabel(self, 'coral', 'FEB', pos = (2, 5), size = (40, 20))
        self.top[1] = TextLabel(self, 'wheat', 'ALL', pos = (42, 5), size = (40, 20))
        self.top[2] = TextLabel(self, 'coral', 'CH', pos = (84, 5), size = (40, 20))
        self.top[3] = TextLabel(self, 'wheat', 'ALL', pos = (124, 5), size = (40, 20))
        self.top[4] = TextLabel(self, 'coral', 'CROC', pos = (166, 5), size = (45, 20))
        self.top[5] = TextLabel(self, 'wheat', '', pos = (211, 5), size = (40, 20))
        # The FLASH Commands box.
        wx.StaticBox(self, -1, "FLASH Commands", size = (300, 80), pos = (5, 30))
        self.write = wx.Button(self, -1, "Write File to FLASH Memory", size = (290, 26), pos = (10, 49))
        self.write.SetBackgroundColour('coral')
        self.write.Bind(wx.EVT_BUTTON, self.writetoFLASH)
        self.reboot = wx.Button(self, -1, "Reboot FEs (reload FLASH content)", size = (290, 26), pos = (10, 77))
        self.reboot.SetBackgroundColour('coral')
        self.reboot.Bind(wx.EVT_BUTTON, self.rebootFEs)
        # The Timing Setup box.
        wx.StaticBox(self, -1, "Timing Setup", size = (150, 119), pos = (5, 115))
        self.setup1choices = ['CLK Source', 'something']
        self.setup1 = wx.Choice(self, -1, choices = self.setup1choices, size = (140, 22), pos = (10, 134))
        self.setup1.Select(n = 0)
        self.setup2choices = ['Test Pulse', 'something']
        self.setup2 = wx.Choice(self, -1, choices = self.setup2choices, size = (140, 22), pos = (10, 158))
        self.setup2.Select(n = 0)
        tpdelaytxt = TextLabel(self, 'coral', 'TP Delay', size = (75, 20), pos = (10, 182))
        self.drawTPdelay(True, '')
        self.TSread = wx.Button(self, -1, "Read", size = (60, 26), pos = (10, 204))
        self.TSread.SetBackgroundColour('coral')
        self.TSread.Bind(wx.EVT_BUTTON, self.doTSread)
        self.drawTSread(True, '')
        # The Fast Command box.
        wx.StaticBox(self, -1, "Fast Command", size = (150, 73), pos = (5, 238))
        self.fcChoices = ['Fast Command', 'something']
        self.fastCommand = wx.Choice(self, -1, choices = self.fcChoices, size = (140, 22), pos = (10, 257))
        self.fastCommand.Select(n = 0)
        self.sendFC = wx.Button(self, -1, 'Send Fast Cmd', size = (140, 26), pos = (10, 281))
        self.sendFC.SetBackgroundColour('coral')
        self.sendFC.Bind(wx.EVT_BUTTON, self.sendFCcmd)
        # The Loop Delay Box.
        wx.StaticBox(self, -1, "Loop Delay", size = (150, 163), pos = (5, 315))
        self.ldRead = wx.Button(self, -1, 'Read Loop Delay', size = (140, 26), pos = (10, 334))
        self.ldRead.SetBackgroundColour('coral')
        self.ldRead.Bind(wx.EVT_BUTTON, self.doldRead)
        for i in range(4):
            TextLabel(self, 'coral', 'Ch ' + str(i + 1), size = (40, 20), pos = (10, 362 + 21 * i))
        self.drawldCh(True, ('', '', '', ''))
        self.clear = wx.Button(self, -1, 'Clear Loop Delay', size = (140, 26), pos = (10, 448))
        self.clear.SetBackgroundColour('coral')
        self.clear.Bind(wx.EVT_BUTTON, self.clearLoopDelay)
        # The Reset and Test Pulse field.
        wx.StaticBox(self, -1, "Reset and Test Pulse", size = (250, 190), pos = (160, 115))
        self.resets = [None for i in range(4)]
        self.pulses = [None for i in range(4)]
        for i in range(4):
            self.resets[i] = wx.CheckBox(self, -1, 'Reset Ch' + str(i + 1), size = (118, 20), pos = (165, 134 + 21 * i))
            self.resets[i].SetBackgroundColour('coral')
            self.pulses[i] = wx.CheckBox(self, -1, 'TPulse Ch' + str(i + 1), size = (118, 20), pos = (287, 134 + 21 * i))
            self.pulses[i].SetBackgroundColour('coral')
        self.tpWrite = wx.Button(self, -1, "Write", size = (60, 26), pos = (165, 219))
        self.tpWrite.SetBackgroundColour('coral')
        self.tpWrite.Bind(wx.EVT_BUTTON, self.dotpWrite)
        self.tpRead = wx.Button(self, -1, "Read", size = (60, 26), pos = (228, 219))
        self.tpRead.SetBackgroundColour('coral')
        self.tpRead.Bind(wx.EVT_BUTTON, self.dotpRead)
        self.drawtpRead(True, '')
        self.sendReset = wx.Button(self, -1, "Send Reset (reload FPGA)", size = (240, 26), pos = (165, 247))
        self.sendReset.SetBackgroundColour('coral')
        self.sendReset.Bind(wx.EVT_BUTTON, self.doSendReset)
        self.sendTP = wx.Button(self, -1, "Send Test Pulse", size = (240, 26), pos = (165, 275))
        self.sendTP.SetBackgroundColour('coral')
        self.sendTP.Bind(wx.EVT_BUTTON, self.doSendTP)
        # The Channel FEB Gate Delays box.
        wx.StaticBox(self, -1, "Channel FEB Gate Delays", size = (250, 144), pos = (160, 305))
        self.report = wx.Button(self, -1, "Report Alighment Ch#", size = (197, 26), pos = (165, 324))
        self.report.SetBackgroundColour('coral')
        self.report.Bind(wx.EVT_BUTTON, self.reportAlign)
        self.chanNum = wx.TextCtrl(self, -1, '1', size = (40, 20), pos = (365, 327))
        numMeasTxt = TextLabel(self, 'coral', "# of Measurements", size = (180, 20), pos = (165, 353))
        self.numMeas = wx.TextCtrl(self, -1, '5', size = (55, 20), pos = (350, 353))
        loadtimerTxt = TextLabel(self, 'coral', "Load Timer Value", size = (180, 20), pos = (165, 375))
        self.loadTimer = wx.TextCtrl(self, -1, '15', size = (55, 20), pos = (350, 375))
        gatestartTxt = TextLabel(self, 'coral', "Gate Start Value", size = (180, 20), pos = (165, 397))
        self.gateStart = wx.TextCtrl(self, -1, '63500', size = (55, 20), pos = (350, 397))
        self.allchains = wx.Button(self, -1, "Report Alignments All Chains", size = (240, 26), pos = (165, 419))
        self.allchains.SetBackgroundColour('coral')
        self.allchains.Bind(wx.EVT_BUTTON, self.reportAllChains)
        
    def setSettings(self):
        """Calls getCrocData() and adds its output to the dictionary with key crocNum."""
        if self.crocNum != None:
            self.settings[self.crocNum] = self.getCrocData()

    def passSettings(self, settings):
        """Called by the Load from File function, overwrites self.settings with an entirely new set of settings.
        Calls setFields to display the new settings, if a CROC page is active."""
        self.settings = settings
        self.setFields()

    def getSettings(self):
        """Returns self.settings dictionary. The call to setSettings() allows this function to be called while a page
        is active, and still save the results from that page."""
        self.setSettings()
        return self.settings

    def setFields(self):
        """If a CROC number is selected, sets the values of all fields to those stored in the settings dictionary."""
        if self.crocNum != None:
            self.setup1.Select(n = self.settings[self.crocNum][0])
            self.setup2.Select(n = self.settings[self.crocNum][1])
            self.drawTPdelay(False, '')
            self.drawTSread(False, '')
            self.fastCommand.Select(n = self.settings[self.crocNum][2])
            self.drawldCh(False, ('', '', '', ''))
            for i in range(4):
                self.resets[i].SetValue(self.settings[self.crocNum][i + 3])
                self.pulses[i].SetValue(self.settings[self.crocNum][i + 7])
            self.numMeas.SetValue(self.settings[self.crocNum][11])
            self.loadTimer.SetValue(self.settings[self.crocNum][12])
            self.gateStart.SetValue(self.settings[self.crocNum][13])

    def setListOfCrocs(self, clist):
        """Creates a list of CROCs as found by the hardware scan. For each, stores initial values in the settings dictionary."""
        self.listOfCrocs = clist
        for croc in self.listOfCrocs:
            self.settings[croc] = [0, 0, 0, False, False, False, False, False, False, False, False, '5', '15', '63500']

    def drawtpRead(self, first, txt):
        """Destroys the Timing Setup read in field, if there is one. Draws a new one with txt as its text."""
        if not first:
            self.tpReadfield.Destroy()
        self.tpReadfield = TextLabel(self, 'wheat', txt, size = (117, 20), pos = (288, 222))

    def drawldCh(self, first, stringtuple):
        """Destroys the LD Channel read in fields, if they exist. Draws new ones with stringtuple as text."""
        self.loopDelayCh = stringtuple
        if not first:
            for i in range(4):
                self.ldCh[i].Destroy()
        else:
            self.ldCh = [None for i in range(4)]
        for i in range(4):
            self.ldCh[i] = TextLabel(self, 'wheat', stringtuple[i], size = (100, 20), pos = (50, 362 + 21 * i))

    def drawTSread(self, first, txt):
        """Takes a string and creates the Timing Setup's Read box."""
        if not first:
            self.tsreadfield.Destroy()
        self.tsreadfield = TextLabel(self, 'wheat', txt, size = (80, 20), pos = (70, 207))

    def drawTPdelay(self, first, txt):
        """Takes a string and creates the TP Delay box."""
        if not first:
            self.tpdelay.Destroy()
        self.tpdelay = TextLabel(self, 'wheat', txt, size = (65, 20), pos = (85, 182))

    def drawCrocTop(self, croc):
        """Destroys the CROC number in the top label and draws a new one with the correct CROC number."""
        self.crocNum = int(croc)
        self.top[5].Destroy()
        self.top[5] = TextLabel(self, 'wheat', croc, pos = (211, 5), size = (40, 20))

    def writetoFLASH(self, event):
        """This is where the Write to FLASH function will go."""
        if self.crocNum == None:
            print "ERROR: Choose a CROC from the tree."
        else:
            print 'Write CROC ' + str(self.crocNum) + ' to Flash.'

    def rebootFEs(self, event):
        """This is where the Reboot FEBs function will go."""
        print 'Reboot FEBs'

    def doTSread(self, event):
        """Eventually: read in from the Timing Setup and draw the field. For now, prints 'reading'."""
        # For now:
        self.drawTSread(False, 'reading')

    def sendFCcmd(self, event):
        """The callback for the Send Fast Command button."""
        print 'send fast cmd'

    def doldRead(self, event):
        """The callback for the Read Loop Dealy button. For now, prints dummy info."""
        self.drawldCh(False, ('read', 'in', 'this', 'information'))

    def clearLoopDelay(self, event):
        """The callback for the Clear Loop Delay button."""
        self.drawldCh(False, ('', '', '', ''))

    def dotpWrite(self, event):
        """The callback for the Test Pulse box Write button."""
        if self.crocNum != None:
            print "Write test pulses for CROC " + str(self.crocNum) + "."

    def dotpRead(self, event):
        """The callback for the Test Pulse box Read button. For now, prints 'reading'."""
        self.drawtpRead(False, 'reading')

    def doSendReset(self, event):
        """The callback for the Send Reset (Reload FPGA) button. For now, prints a list of channels that are
        checked in the Resets check boxes."""
        if self.crocNum != None:
            print "The following channels were reset in CROC" + str(self.crocNum) + ":"
            none = True
            for i in range(4):
                if self.resets[i].GetValue():
                    print 'Ch', i + 1
                    self.resets[i].SetValue(False)
                    none = False
            if none:
                print "(None)"
        else:
            print "ERROR: Choose a CROC from the tree."

    def doSendTP(self, event):
        """The callback for the Send Test Pulse button. For now, prints a list of channels that are checked in
        the Test Pulse check boxes."""
        if self.crocNum != None:
            print "The following channels were reset in CROC" + str(self.crocNum) + ":"
            none = True
            for i in range(4):
                if self.pulses[i].GetValue():
                    print 'Ch', i + 1
                    self.pulses[i].SetValue(False)
                    none = False
            if none:
                print "(None)"
        else:
            print "ERROR: Choose a CROC from the tree."

    def reportAlign(self, event):
        """A callback for the Report Alignment Ch # button. For now, prints the chain selected, if it is a number."""
        if self.crocNum == None:
            print "ERROR: Choose a CROC from the tree."
        else:
            val = self.chanNum.GetValue()
            try:
                intval = int(val)
                if intval != float(val):
                    print "ERROR: " + val + " is not a valid channel number."
                else:
                    print "CROC " + str(self.crocNum) + ", chain " + val + " aligned."
            except ValueError:
                print "ERROR: " + val + " is not a valid channel number."
        
    def reportAllChains(self, event):
        """A callback for the Report Alignments All Chains button."""
        if self.crocNum == None:
            print "ERROR: Choose a CROC from the tree."
        else:
            print "CROC " + str(self.crocNum) + ", all chains aligned."

    def getCrocData(self):
        """Returns the a list containing the data for each field in the CROC tab."""
        return [self.setup1.GetCurrentSelection(), self.setup2.GetCurrentSelection(), self.fastCommand.GetCurrentSelection(),
                self.resets[0].GetValue(), self.resets[1].GetValue(), self.resets[2].GetValue(), self.resets[3].GetValue(),
                self.pulses[0].GetValue(), self.pulses[1].GetValue(), self.pulses[2].GetValue(), self.pulses[3].GetValue(),
                self.numMeas.GetValue(), self.loadTimer.GetValue(), self.gateStart.GetValue()]
    
class CH(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the CH tab in the Notebook."""
        wx.Panel.__init__(self, parent, ID, size = (700, 600))
        # Initialize the Croc and Ch information to None.
        self.numInfo = (None, None)
        self.top = [None for i in range(6)]
        self.top[0] = TextLabel(self, 'coral', 'FEB', pos = (2, 5), size = (40, 20))
        self.top[1] = TextLabel(self, 'wheat', 'ALL', pos = (42, 5), size = (40, 20))
        self.top[2] = TextLabel(self, 'coral', 'CH', pos = (84, 5), size = (40, 20))
        self.top[3] = TextLabel(self, 'wheat', '', pos = (124, 5), size = (40, 20))
        self.top[4] = TextLabel(self, 'coral', 'CROC', pos = (166, 5), size = (45, 20))
        self.top[5] = TextLabel(self, 'wheat', '', pos = (211, 5), size = (40, 20))
        # The FLASH Commands box.
        wx.StaticBox(self, -1, "FLASH Commands", size = (300, 80), pos = (5, 30))
        self.write = wx.Button(self, -1, "Write File to FLASH Memory", size = (290, 26), pos = (10, 49))
        self.write.SetBackgroundColour('coral')
        self.write.Bind(wx.EVT_BUTTON, self.writetoFLASH)
        self.reboot = wx.Button(self, -1, "Reboot FEs (reload FLASH content)", size = (290, 26), pos = (10, 77))
        self.reboot.SetBackgroundColour('coral')
        self.reboot.Bind(wx.EVT_BUTTON, self.rebootFEs)
        # The Status Register box.
        wx.StaticBox(self, -1, "Status Register", size = (200, 394), pos = (5, 115))
        self.clearReg = wx.Button(self, -1, "Clear Status Register", size = (190, 26), pos = (10, 134))
        self.clearReg.SetBackgroundColour('coral')
        self.clearReg.Bind(wx.EVT_BUTTON, self.clearRegister)
        self.readStat = wx.Button(self, -1, "Read Status", size = (125, 26), pos = (10, 163))
        self.readStat.SetBackgroundColour('coral')
        self.readStat.Bind(wx.EVT_BUTTON, self.readStatus)
        self.drawRegister(True, True)
        # The DPM Register box.
        wx.StaticBox(self, -1, "DPM Register", size = (200, 80), pos = (210, 115))
        self.resetDPM = wx.Button(self, -1, "Reset DPM Pointer", size = (140, 26), pos = (215, 134))
        self.resetDPM.SetBackgroundColour('coral')
        self.resetDPM.Bind(wx.EVT_BUTTON, self.DPMreset)
        self.readDPM = wx.Button(self, -1, "Read DPM Pointer", size = (140, 26), pos = (215, 163))
        self.readDPM.SetBackgroundColour('coral')
        self.readDPM.Bind(wx.EVT_BUTTON, self.DPMread)
        self.drawReadDPM(True, '')
        # The Frame Registers box.
        wx.StaticBox(self, -1, "Frame Registers", size = (200, 309), pos = (210, 200))
        self.appendMsg = wx.Button(self, -1, "Append Msg (0x)", size = (149, 26), pos = (215, 219))
        self.appendMsg.SetBackgroundColour('coral')
        self.appendMsg.Bind(wx.EVT_BUTTON, self.appendMessage)
        self.msg = wx.TextCtrl(self, -1, '', size = (40, 20), pos = (365, 222))
        self.writeFIFO = wx.Button(self, -1, "Write FIFO", size = (94, 26), pos = (215, 248))
        self.writeFIFO.SetBackgroundColour('coral')
        self.writeFIFO.Bind(wx.EVT_BUTTON, self.writefifo)
        self.sendFrame = wx.Button(self, -1, "Send Frame", size = (94, 26), pos = (311, 248))
        self.sendFrame.SetBackgroundColour('coral')
        self.sendFrame.Bind(wx.EVT_BUTTON, self.sendframe)
        self.readDPMbytes = wx.Button(self, -1, "Read DPM bytes->", size = (149, 26), pos = (215, 276))
        self.readDPMbytes.SetBackgroundColour('coral')
        self.readDPMbytes.Bind(wx.EVT_BUTTON, self.readBytes)
        self.bytes = wx.TextCtrl(self, -1, '', size = (40, 20), pos = (365, 279))
        self.multitext = wx.TextCtrl(self, -1, '', size = (190, 198), pos = (215, 304), style = wx.TE_MULTILINE)

    def drawReadDPM(self, first, txt):
        """Destroys the Read DPM Pointer field, if there is one. Creates a new one with txt as its text."""
        if not first:
            self.readDPMfield.Destroy()
        self.readDPMfield = TextLabel(self, 'wheat', txt, size = (50, 20), pos = (355, 166))

    def drawRegister(self, clear, first):
        """Draws the Status Register, with information from getStatus()."""
        if not first:
            # Then the status boxes already exist, so destroy them.
            self.status.Destroy()
            for i in range(16):
                self.statusBoxes[i].Destroy()
        else:
            # This is the first call to this function. Draw the labels.
            self.registerLabels = ['Mag Sent', 'Mag Received', 'CRC Error', 'Timeout Error', 'FIFO Not Empty', 'FIFO Full',
                                   'DPM Full', 'Unused', 'RF Present', 'Serializer SYNC', 'Deserializer LOCK', 'Unused',
                                   'PLL0 LOCK', 'PLL2 LOCK', 'Unused', 'Unused']
            labels = [None for i in range(16)]
            for i in range(4):
                for j in range(4):
                    labels[4 * i + j] = TextLabel(self, 'coral', self.registerLabels[4 * i + j], size = (160, 18), pos = (10, 192 + 19 * (4 * i + j) + 2 * i))
        self.status = TextLabel(self, 'wheat', self.getStatus(clear)[0], size = (65, 20), pos = (135, 166))
        
        self.statusBoxes = [None for i in range(16)]
        for i in range(4):
            for j in range(4):
                self.statusBoxes[4 * i + j] = TextLabel(self, 'wheat', self.getStatus(clear)[4 * i + j + 1], size = (30, 18), pos = (170, 192 + 19 * (4 * i + j) + 2 * i))

    def drawChTop(self, (ch, croc)):
        """Draws the top label, displaying the correct Channel and CROC number. Also sets self.numInfo."""
        self.numInfo = (int(ch), int(croc))
        for i in [3, 5]:
            self.top[i].Destroy()
        self.top[3] = TextLabel(self, 'wheat', ch, pos = (124, 5), size = (40, 20))
        self.top[5] = TextLabel(self, 'wheat', croc, pos = (211, 5), size = (40, 20))

    def writetoFLASH(self, event):
        """A callback for the Write to Flash button. For now, prints to Description tab."""
        if self.numInfo == (None, None):
            print "ERROR: Select a channel from the tree."
        else:
            print "CROC " + str(self.numInfo[1]) + ", Channel " + str(self.numInfo[0]) + ", write to FLASH."

    def rebootFEs(self, event):
        """A callback for the Reboot FEs button. For now, prints to Description tab."""
        print 'Reboot FEBs.'

    def clearRegister(self, event):
        """Clears the Status Register by calling drawRegister with a value of True for clear."""
        self.drawRegister(True, False)

    def getStatus(self, clear):
        """Eventually: Checks the status of the channel and returns the proper values. For now, some dummy values."""
        if clear:
            return [''] + ['0' for i in range(16)]
        else:
            return ['3507'] + ['0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1']

    def DPMreset(self, event):
        """Resets the DPM pointer field by drawing it with no text."""
        self.drawReadDPM(False, '')

    def readStatus(self, event):
        """Reads the status of the channel by drawing the register."""
        if self.numInfo != (None, None):
            self.drawRegister(False, False)

    def DPMread(self, event):
        """Eventually: reads in the DPM pointer and draws the DPM field with the result. For now, prints 'reading'."""
        self.drawReadDPM(False, 'reading')

    def appendMessage(self, event):
        """A callback for the Append Msg button. For now, prints the value of the text entry field next to the button."""
        print "Message is: " + self.msg.GetValue() + "."

    def writefifo(self, event):
        """A callback for the Write FIFO button. For now, prints to the Description tab."""
        print "FIFO"

    def sendframe(self, event):
        """A callback for the Send Frame button. For now, prints to the Description tab."""
        print "frame sent."

    def readBytes(self, event):
        """A callback for the Read DPM bytes button. For now, prints the value of the text entry field to the Description tab."""
        print "DPM Bytes is: " + self.bytes.GetValue() + "."

class FPGA(wx.Panel):
    def __init__(self, parent, ID, nb):
        """Creates the FPGA Regs tab in the Notebook. Arguments: self, parent and ID as usual.
        nb gives the FPGA page the ability to change the page to the Description tab. boardList
        is the dictionary of boards that the hardware scan found."""
        wx.Panel.__init__(self, parent, ID, size = (700, 600))
        # Taking the notebook allows for changing the tab from inside this page.
        self.nb = nb
        self.numInfo = (None, None, None)
        # Initializes the settings dictionary. The keys are FEB numbers, the values are lists of settings.
        self.settings = {}
        # Draws the default (blank) top label.
        self.top = [None for i in range(6)]
        self.top[0] = TextLabel(self, 'coral', 'FEB', pos = (2, 5), size = (40, 20))
        self.top[1] = TextLabel(self, 'wheat', '', pos = (42, 5), size = (40, 20))
        self.top[2] = TextLabel(self, 'coral', 'CH', pos = (84, 5), size = (40, 20))
        self.top[3] = TextLabel(self, 'wheat', '', pos = (124, 5), size = (40, 20))
        self.top[4] = TextLabel(self, 'coral', 'CROC', pos = (166, 5), size = (45, 20))
        self.top[5] = TextLabel(self, 'wheat', '', pos = (211, 5), size = (40, 20))
        # Creates a wx ScrolledWindow widget. The fields will be children of this window.
        self.scroll = wx.ScrolledWindow(self, -1, pos = (2, 30), size = (305, 480))
        self.scroll.SetScrollbars(0, 15, 250, 84)
        # In Default mode, self.expand is False. The default is Default mode (surprise!).
        self.expand = False
        # The Read, Write, and Write All FEBs buttons.
        self.write = wx.Button(self, -1, "WRITE", size = (85, 26), pos = (395, 36))
        self.write.SetBackgroundColour('coral')
        self.write.Bind(wx.EVT_BUTTON, self.writeInfo)
        self.read = wx.Button(self, -1, "READ", size = (85, 26), pos = (395, 67))
        self.read.SetBackgroundColour('coral')
        self.read.Bind(wx.EVT_BUTTON, self.readInfo)
        self.writeAll = wx.Button(self, -1, "WRITE ALL FEBs", size = (125, 26), pos = (355, 98))
        self.writeAll.SetBackgroundColour('coral')
        self.writeAll.Bind(wx.EVT_BUTTON, self.writeAllInfo)
        # There are Default and Advanced fields and labels at all times.
        self.advancedLabels = [None for i in range(50)]
        self.defaultLabels = [None for i in range(12)]
        self.advancedFields = [None for i in range(50)]
        self.defaultFields = [None for i in range(12)]
        # A list, in order, of all the fields in the Advanced GUI.
        self.labelList = ['WR Timer', 'WR Gate Start', 'WR Gate Length', 'WR Trip PowOFF',
                        'WR Trip0 InjCnt+EN', 'WR Trip1 InjCnt+EN', 'WR Trip2 InjCnt+EN',
                        'WR Trip3 InjCnt+EN', 'WR Trip4 InjCnt+EN', 'WR Trip5 InjCnt+EN',
                        'WR TripX InjRange', 'WR TripX InjPhase', 'WR InjDAC Value', 'WR InjDAC Mode',
                        'WR InjDAC RS', 'R InjDAC Done', 'WR HV Enable', 'WR HV Target', 'R HV Actual',
                        'R HV Control', 'WR HV Auto/Man', 'WR VXO PLL Sal', 'WR PHASE RS', 'WR PHASE +/-',
                        'WR PHASE Spare', 'WR PHASE Ticks', 'R DCM1 LOCK', 'R DCM2 LOCK', 'R DCM1 NoCLK',
                        'R DCM2 NoCLK', 'R DCM2 PHDone', 'R DCM2 PHTotal', 'R TP Count2b', 'R TP Count',
                        'R MyBoardID', 'R Version', 'WR HV NumAvg', 'WR HV PeriodMan', 'R HV PeriodAuto',
                        'WR HV PulseWidth', 'R Temperature', 'WR TripXThreshold', 'R TripXComparators',
                        'R ExtTriggFound', 'WR ExtTriggRearm', 'WR DM_T0 0x', 'WR DM_T1 0x', 'WR DM_T2 0x',
                        'WR DM_T3 0x', 'R GateTimeStamp']
        # A list of default initial values for each of the fields.
        self.defaultList = ['12', '63942', '1024', '0', '0', '0', '0', '0', '0', '0', '0', 0, '0', 0, 0, '0', 0,
                                '47000', '24984', '0', 0, 1, 0, 0, '0', '0', '1', '1', '0', '0', '0', '256', '0', '2',
                                '15', '76', '0', '48000', '0', '30', '3272, 25.5625 C', '255', '63', '1', '0',
                                'FFFF', 'FFFF', 'FFFF', 'FFFF', '1600']
        # A dictionary of choices for the pulldown menus (wx.Choice).
        self.choicesDict = {11:['1 Sync CLK0', '2 Sync CLK90', '4 Synk CLK180', '8 Sync CLK270', '...Sync Error'], 13:['0 Normal', '1 PD 1K', '2 PD 100K', '3 PD Hi-Z'],
                           14:['0 Reset', '1 Start'], 16:['0 HV Off', '1 HV On'], 20:['0 Auto', '1 Manual'],
                            21:['0 Analog Devices', '1 Xilinx'], 22:['0 Reset', '1 Start'], 23:['0 Decrement', '1 Incrament']}
        # We draw both GUIs. The Advanced GUI will hide itself initially.
        self.drawDefaultGUI()
        self.drawAdvancedGUI()
        
    def setBoardList(self, boardList):
        self.boardList = boardList

    def drawFPGATop(self, (feb, ch, croc)):
        """Draws the top label for the FPGA Register tab. Also sets numInfo variable, and FEB
        variable which is derived from boardList dictionary."""
        self.numInfo = (int(feb), int(ch), int(croc))
        # This is the FEB object that will call functions from the feb module for read and write.
        self.FEB = self.boardList[self.numInfo[0]]
        for i in [1, 3, 5]:
            self.top[i].Destroy()
        self.top[1] = TextLabel(self, 'wheat', feb, pos = (42, 5), size = (40, 20))
        self.top[3] = TextLabel(self, 'wheat', ch, pos = (124, 5), size = (40, 20))
        self.top[5] = TextLabel(self, 'wheat', croc, pos = (211, 5), size = (40, 20))

    def drawAdvancedGUI(self):
        """Creates the advanced GUI fields and labels, and hides them."""
        for i in range(50):
            self.advancedLabels[i] = TextLabel(self.scroll, 'coral', self.labelList[i], pos = (5, 25 * i + 5), textpos = (1, 3))
            self.advancedLabels[i].Hide()
        for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]:
            # These are all the TextCtrl fields.
            self.advancedFields[i] = wx.TextCtrl(self.scroll, -1, self.defaultList[i], size = (130, 23), pos = (142, 25 * i + 5))
            self.advancedFields[i].Hide()
        for i in [11, 13, 14, 16, 20, 21, 22, 23]:
            # These are the Choice (pulldown menu) fields. The choices come from the choicesDict dictionary.
            self.advancedFields[i] = wx.Choice(self.scroll, -1, choices = self.choicesDict[i], size = (130, 23), pos = (142, 25 * i + 5))
            self.advancedFields[i].Select(n = self.defaultList[i])
            self.advancedFields[i].Hide()

    def drawDefaultGUI(self):
        """Creates the default GUI fields and labels, and shows them."""
        j = 0
        for i in [3, 16, 17, 18, 20, 34, 35, 36, 37, 38, 39, 40]:
            # These positions in the label list are default fields.
            self.defaultLabels[j] = TextLabel(self.scroll, 'coral', self.labelList[i], pos = (5, 25 * j + 5), textpos = (1, 3))
            j += 1
        jList = [0, 2, 3, 5, 6, 7, 8, 9, 10, 11]
        j = 0
        for i in [3, 17, 18, 34, 35, 36, 37, 38, 39, 40]:
            # Draws the TextCtrl fields.
            self.defaultFields[jList[j]] = wx.TextCtrl(self.scroll, -1, self.defaultList[i], size = (130, 23), pos = (142, 25 * jList[j] + 5))
            j += 1
        jList = [1, 4]
        j = 0
        for i in [16, 20]:
            # Draws the Choice fields, and makes the default selection.
            self.defaultFields[jList[j]] = wx.Choice(self.scroll, -1, choices = self.choicesDict[i], size = (130, 23), pos = (142, 25 * jList[j] + 5))
            self.defaultFields[jList[j]].Select(n = self.defaultList[i])
            j += 1
        # Draws the "toggle button". Initially we are in Default mode so it will read Show Advanced GUI.
        self.toggle = wx.Button(self, -1, 'Show Advanced GUI', size = (160, 26), pos = (320, 5))
        self.toggle.SetBackgroundColour('coral')
        self.toggle.Bind(wx.EVT_BUTTON, self.flopAndDraw)

    def setListOfFEBs(self, febList):
        """Takes the list of FEBs from the hardware scan. To each FEB number, assigns as a value in the settings
        dictionary alist of the default settings, which can be overwritten."""
        self.listOfFEBs = febList
        for feb in self.listOfFEBs:
            self.settings[feb] = ['12', '63942', '1024', '0', '0', '0', '0', '0', '0', '0', '0', 1, '0', 0, 0, '0', 0,
                                '47000', '24984', '0', 0, 1, 0, 0, '0', '0', '1', '1', '0', '0', '0', '256', '0', '2',
                                '15', '76', '0', '48000', '0', '30', '3272, 25.5625 C', '255', '63', '1', '0',
                                'FFFF', 'FFFF', 'FFFF', 'FFFF', '1600']

    def writeInfo(self, event):
        """A callback for the Write button, for now it prints to the Description tab every value in the Advanced GUI,
        regardless of whether they are displayed or not."""

        """This block was written 6 August, without sufficient time to test.  It should work, though.
        self.nb.ChangeSelection(0)
        data = self.getFPGAData()
        try:
            self.FEB.SetTimer(int(data[0]))
            self.FEB.SetGateStart(int(data[1]))
            self.FEB.SetGateLength(int(data[2]))
            self.FEB.SetTripPowerOff(chr(int(data[3])))
            for i in range(6):
                self.FEB.SetInjectCount(chr(int(data[4+i])),i)
            self.FEB.SetInjectRange(chr(int(data[10])))
            self.FEB.SetInjectPhase(chr(data[11]))
            self.FEB.SetInjectDACValue(chr(int(data[12])))
            self.FEB.SetInjectDACMode(chr(data[13]))
            self.FEB.SetInjectDACStart(chr(data[14]))
            self.FEB.SetInjectDACDone(chr(int(data[15])))
            self.FEB.SetHVEnabled(chr(data[16]))
            self.FEB.SetHVTarget(int(data[17]))
            self.FEB.SetHVActual(int(data[18]))
            self.FEB.SetHVControl(chr(int(data[19])))
            self.FEB.SetHVManual(chr(int(data[20])))
            self.FEB.SetVXOMuxXilinx(chr(int(data[21])))
            self.FEB.SetPhaseStart(chr(int(data[22])))
            self.FEB.SetPhaseIncrement(chr(int(data[23])))
            self.FEB.SetPhaseSpare(chr(int(data[24])))
            self.FEB.SetPhaseCount(chr(int(data[25])))
            self.FEB.SetDCM1Lock(chr(int(data[26])))
            self.FEB.SetDCM2Lock(chr(int(data[27])))
            self.FEB.SetDCM1NoClock(chr(int(data[28])))
            self.FEB.SetDCM2NoClock(chr(int(data[29])))
            self.FEB.SetDCM2PhaseDone(chr(int(data[30])))
            self.FEB.SetDCM2PhaseTotal(int(data[31]))
            self.FEB.SetTestPulse2Bit(chr(int(data[32])))
            self.FEB.SetTestPulseCount(int(data[33])))
            self.FEB.SetBoardID(chr(int(data[34])))
            self.FEB.SetFirmwareVersion(chr(int(data[35])))
            self.FEB.SetHVNumAve(chr(int(data[36])))
            self.FEB.SetHVPeriodManual(int(data[37]))
            self.FEB.SetHVPeriodAuto(int(data[38]))
            self.FEB.SetHVPulseWidth(chr(int(data[39])))
            self.FEB.SetTemperature(int(data[40]))
            self.FEB.SetTripXCCompEnc(chr(int(data[42])))
            self.FEB.SetExtTriggerFound(chr(int(data[43])))
            self.FEB.SetExtTriggerRearm(chr(int(data[44])))
            for i in range(4):
                self.FEB.SetDiscrimEnableMask(chr(int(data[45+i])),i)
            self.FEB.SetGateTimeStamp(int(data[49]))
        except ValueError:
            print "ERROR WRITING VALUES: Must be integer values."
            """
        if self.numInfo == (None, None, None):
            print "ERROR: Choose an FPGA Chip from the tree."
        else:
            print "For CROC " + str(self.numInfo[2]) + ", Channel " + str(self.numInfo[1]) + ", FEB " + str(self.numInfo[0]) + ":"
            for i in range(50):
                try:
                    print self.advancedFields[i].GetValue()
                except AttributeError:
                    print self.choicesDict[i][self.advancedFields[i].GetCurrentSelection()]

    def writeAllInfo(self, event):
        """A callback for the Write all FEBsbutton, for now it prints to the Description tab every value in the
        Advanced GUI, regardless of whether they are displayed or not."""
        print "For all FEBs:"
        self.nb.ChangeSelection(0)
        for i in range(50):
            try:
                print self.advancedFields[i].GetValue()
            except AttributeError:
                print self.choicesDict[i][self.advancedFields[i].GetCurrentSelection()]

    def readInfo(self, event):
        """A callback for the Read button. Reads values from feb and updates GUI."""
        # Set the advanced fields.
        self.advancedFields[0].SetValue(str(self.FEB.GetTimer()))
        self.advancedFields[1].SetValue(str(self.FEB.GetGateStart()))
        self.advancedFields[2].SetValue(str(self.FEB.GetGateLength()))
        self.advancedFields[3].SetValue(str(self.FEB.GetTripPowerOff()))
        self.advancedFields[4].SetValue(str(self.FEB.GetInjCount0() + self.FEB.GetInjEnable0()))
        self.advancedFields[5].SetValue(str(self.FEB.GetInjCount1() + self.FEB.GetInjEnable1()))
        self.advancedFields[6].SetValue(str(self.FEB.GetInjCount2() + self.FEB.GetInjEnable2()))
        self.advancedFields[7].SetValue(str(self.FEB.GetInjCount3() + self.FEB.GetInjEnable3()))
        self.advancedFields[8].SetValue(str(self.FEB.GetInjCount4() + self.FEB.GetInjEnable4()))
        self.advancedFields[9].SetValue(str(self.FEB.GetInjCount5() + self.FEB.GetInjEnable5()))
        self.advancedFields[10].SetValue(str(self.FEB.GetInjectRange()))
        self.advancedFields[11].Select(n = self.FEB.GetInjectPhase())
        self.advancedFields[12].SetValue(str(self.FEB.GetInjDACValue()))
        self.advancedFields[13].Select(n = self.FEB.GetInjDACMode())
        self.advancedFields[14].Select(n = self.FEB.GetInjDACStart())
        self.advancedFields[15].SetValue(str(self.FEB.GetInjDACDone()))
        self.advancedFields[16].Select(n = self.FEB.GetHVEnabled())
        self.advancedFields[17].SetValue(str(self.FEB.GetHVTarget()))
        self.advancedFields[18].SetValue(str(self.FEB.GetHVActual()))
        self.advancedFields[19].SetValue(str(self.FEB.GetHVControl()))
        self.advancedFields[20].Select(n = self.FEB.GetHVManual())
        self.advancedFields[21].Select(n = self.FEB.GetVXOXilinx())
        self.advancedFields[22].Select(n = self.FEB.GetPhaseStart())
        self.advancedFields[23].Select(n = self.FEB.GetPhaseInc())
        self.advancedFields[24].SetValue(str(self.FEB.GetPhaseSpare()))
        self.advancedFields[25].SetValue(str(self.FEB.GetPhaseCount()))
        self.advancedFields[26].SetValue(str(self.FEB.GetDCM1Lock()))
        self.advancedFields[27].SetValue(str(self.FEB.GetDCM2Lock()))
        self.advancedFields[28].SetValue(str(self.FEB.GetDCM1NoClock()))
        self.advancedFields[29].SetValue(str(self.FEB.GetDCM2NoClock()))
        self.advancedFields[30].SetValue(str(self.FEB.GetDCM2PhaseDone()))
        self.advancedFields[31].SetValue(str(self.FEB.GetDCM2PhaseTotal()))
        self.advancedFields[32].SetValue(str(self.FEB.GetTP2Bit()))
        self.advancedFields[33].SetValue(str(self.FEB.GetTPCount()))
        self.advancedFields[34].SetValue(str(self.FEB.GetBoardID()))
        self.advancedFields[35].SetValue(str(self.FEB.GetVersion()))
        self.advancedFields[36].SetValue(str(self.FEB.GetHVNumAvg()))
        self.advancedFields[37].SetValue(str(self.FEB.GetHVPeriodManual()))
        self.advancedFields[38].SetValue(str(self.FEB.GetHVPeriodAuto()))
        self.advancedFields[39].SetValue(str(self.FEB.GetHVPulseWidth()))
        self.advancedFields[40].SetValue(str(self.FEB.GetTemperature()))
        self.advancedFields[41].SetValue(str(255))
        self.advancedFields[42].SetValue(str(self.FEB.GetTripXCompEnc()))
        self.advancedFields[43].SetValue(str(self.FEB.GetExtTriggerFound()))
        self.advancedFields[44].SetValue(str(self.FEB.GetExtTriggerRearm()))
        self.advancedFields[45].SetValue(str(self.FEB.GetDiscEnMask0()))
        self.advancedFields[46].SetValue(str(self.FEB.GetDiscEnMask1()))
        self.advancedFields[47].SetValue(str(self.FEB.GetDiscEnMask2()))
        self.advancedFields[48].SetValue(str(self.FEB.GetDiscEnMask3()))
        self.advancedFields[49].SetValue(str(self.FEB.GetGateTimeStamp()))
        # Set the default fields.
        self.defaultFields[0].SetValue(str(self.FEB.GetTripPowerOff()))
        self.defaultFields[1].Select(n = self.FEB.GetHVEnabled())
        self.defaultFields[2].SetValue(str(self.FEB.GetHVTarget()))
        self.defaultFields[3].SetValue(str(self.FEB.GetHVActual()))
        self.defaultFields[4].Select(n = self.FEB.GetHVManual())
        self.defaultFields[5].SetValue(str(self.FEB.GetBoardID()))
        self.defaultFields[6].SetValue(str(self.FEB.GetVersion()))
        self.defaultFields[7].SetValue(str(self.FEB.GetHVNumAvg()))
        self.defaultFields[8].SetValue(str(self.FEB.GetHVPeriodManual()))
        self.defaultFields[9].SetValue(str(self.FEB.GetHVPeriodAuto()))
        self.defaultFields[10].SetValue(str(self.FEB.GetHVPulseWidth()))
        self.defaultFields[11].SetValue(str(self.FEB.GetTemperature()))
        # Update the settings dictionary.
        self.setSettings()
    
    def flopAndDraw(self, event):
        """The callback for the toggle button. Saves all data entered in the GUI, then hides the currently displayed
        fields, flops self.expand and shows the other fields. Also redraws the toggle button."""
        data = self.getFPGAData()
        # whichFields is a list of the fields which are to be shown in both default and advanced mode.
        whichFields = [3, 16, 17, 18, 20, 34, 35, 36, 37, 38, 39, 40]
        if self.expand:
            toggleButton = 'Show Advanced GUI'
            for i in range(50):
                self.advancedLabels[i].Hide()
                self.advancedFields[i].Hide()
            for i in range(12):
                self.defaultLabels[i].Show()
                self.defaultFields[i].Show()
                try:
                    self.defaultFields[i].SetValue(data[whichFields[i]])
                except AttributeError:
                    self.defaultFields[i].Select(n = data[whichFields[i]])
        else: 
            toggleButton = 'Show Default GUI'
            for i in range(12):
                self.defaultLabels[i].Hide()
                self.defaultFields[i].Hide()
                try:
                    self.advancedFields[whichFields[i]].SetValue(data[whichFields[i]])
                except AttributeError:
                    self.advancedFields[whichFields[i]].Select(n = data[whichFields[i]])
            for i in range(50):
                self.advancedLabels[i].Show()
                self.advancedFields[i].Show()                
        self.scroll.Scroll(0, 0)
        self.expand = not self.expand
        self.toggle.Destroy()
        self.toggle = wx.Button(self, -1, toggleButton, size = (160, 26), pos = (320, 5))
        self.toggle.SetBackgroundColour('coral')
        self.toggle.Bind(wx.EVT_BUTTON, self.flopAndDraw)
        self.scroll.Scroll(0, 0)

    def getFPGAData(self):
        """Returns all the data from the displayed page only. Returns all 50 advanced mode fields whether or not
        you are in advanced mode."""
        data = []
        if not self.expand:
            # Then the last change was made in default mode, so we store the defaultFields values of the applicable fields.
            whichFields = [3, 16, 17, 18, 20, 34, 35, 36, 37, 38, 39, 40]
            j = 0
            for i in range(50):
                if i in whichFields:
                    try:
                        # The try will work for all TextCtrl fields.
                        data.append(self.defaultFields[j].GetValue())
                    except AttributeError:
                        # Choice does not have the attribute GetValue, so an AttributeError is thrown, and we do this.
                        data.append(self.defaultFields[j].GetCurrentSelection())
                    j += 1
                else:
                    try:
                        data.append(self.advancedFields[i].GetValue())
                    except AttributeError:
                        data.append(self.advancedFields[i].GetCurrentSelection())
        else:
            for i in range(50):
                try:
                    data.append(self.advancedFields[i].GetValue())
                except AttributeError:
                    data.append(self.advancedFields[i].GetCurrentSelection())
        return data

    def setFields(self):
        """Sets the values on the displayed page to the settings dictionary. This function is called whenever the user
        clicks an FPGA trip in the tree, so that the values are updated."""
        if self.numInfo != (None, None, None):
            # We want to scroll up to the top when you click a new chip.
            self.scroll.Scroll(0, 0)
            for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]:
                # These are the TextCtrl fields of the advanced GUI.
                self.advancedFields[i].SetValue(self.settings[self.numInfo[0]][i])
            for i in [11, 13, 14, 16, 20, 21, 22, 23]:
                # The advanced GUI Choice menus.
                self.advancedFields[i].Select(n = self.settings[self.numInfo[0]][i])
            whichFields = [3, 16, 17, 18, 20, 34, 35, 36, 37, 38, 39, 40]
            # Also updates the default fields, so that toggling is fast.
            for i in [0, 2, 3, 5, 6, 7, 8, 9, 10, 11]:
                self.defaultFields[i].SetValue(self.settings[self.numInfo[0]][whichFields[i]])
            for i in [1, 4]:
                self.defaultFields[i].Select(n = self.settings[self.numInfo[0]][whichFields[i]])

    def setSettings(self):
        """If a chip is selected in the tree, gets the entries from that chip and saves them to the settings dictionary."""
        if self.numInfo != (None, None, None):
            self.settings[self.numInfo[0]] = self.getFPGAData()

    def getSettings(self):
        """Calls setSettings and returns the settings dictionary."""
        self.setSettings()
        return self.settings

    def passSettings(self, settings):
        """Takes as input an entire FPGA settings dictionary and overwrites self.settings. Calls setFields
        to update the fields if an FPGA chip is active in the tree."""
        self.settings = settings
        self.setFields()

class TRIP(wx.Choicebook):
    def __init__(self, parent, ID):
        """Creates the TRIP tab in the Notebook. Creates a wx Choicebook that contains the bulk of the information.
        The user can select one of the six TRIP chips on each FEB."""
        wx.Choicebook.__init__(self, parent, ID, size = (400, 480))
        # The settings dictionary in the TRIP is different from the CROC and FPGA because there are six chips.
        # The key is still an FEB number. The value is now a 20x6 matrix, formatted as a list of lists. Each
        # sub-list contains the settings from one TRIP on one FEB. The entire value contains the settings for
        # all six TRIP chips on the FEB.
        self.settings = {}
        self.numInfo = (None, None, None)
        # Calls each of the individual trips and adds them as pages to the Choicebook.
        self.trip0 = TRIPpage(self, -1, 0)
        self.trip1 = TRIPpage(self, -1, 1)
        self.trip2 = TRIPpage(self, -1, 2)
        self.trip3 = TRIPpage(self, -1, 3)
        self.trip4 = TRIPpage(self, -1, 4)
        self.trip5 = TRIPpage(self, -1, 5)
        self.AddPage(self.trip0, 'TRIP 0')
        self.AddPage(self.trip1, 'TRIP 1')
        self.AddPage(self.trip2, 'TRIP 2')
        self.AddPage(self.trip3, 'TRIP 3')
        self.AddPage(self.trip4, 'TRIP 4')
        self.AddPage(self.trip5, 'TRIP 5')

    def drawTRIPTop(self, (feb, ch, croc)):
        """Draws the top label and sets numInfo variable. The top label contains FEB, Channel and CROC information.
        The individual TRIP is selected from the Choicebook menu at the very top of the page."""
        self.numInfo = (int(feb), int(ch), int(croc))
        self.trip0.drawTRIPTop((feb, ch, croc))
        self.trip1.drawTRIPTop((feb, ch, croc))
        self.trip2.drawTRIPTop((feb, ch, croc))
        self.trip3.drawTRIPTop((feb, ch, croc))
        self.trip4.drawTRIPTop((feb, ch, croc))
        self.trip5.drawTRIPTop((feb, ch, croc))

    def setFields(self):
        """Sets the fields for all six TRIPs of an FEB specified as numInfo[0]."""
        if self.numInfo != (None, None, None):
            self.trip0.setFields(self.settings[self.numInfo[0]][0])
            self.trip1.setFields(self.settings[self.numInfo[0]][1])
            self.trip2.setFields(self.settings[self.numInfo[0]][2])
            self.trip3.setFields(self.settings[self.numInfo[0]][3])
            self.trip4.setFields(self.settings[self.numInfo[0]][4])
            self.trip5.setFields(self.settings[self.numInfo[0]][5])

    def setListOfFEBs(self, febList):
        """Gets the list of FEBs from the hardware scanner. Also assigns as a value the 20x6 matrix of values for
        all 6 TRIPs to each FEB key in the list."""
        self.listOfFEBs = febList
        for feb in self.listOfFEBs:
            self.settings[feb] = [['60', '120', '0', '160', '40', '0', '0', '20', '160', '240', '11', '11', '3', '3', '0', '0', '0', '0', '0', '0'] for i in range(6)]

    def setSettings(self):
        """Calls getTRIPData() on each TRIP, and overrides the entire matrix of settings for an FEB."""
        if self.numInfo != (None, None, None):
            data0 = self.trip0.getTRIPData()
            data1 = self.trip1.getTRIPData()
            data2 = self.trip2.getTRIPData()
            data3 = self.trip3.getTRIPData()
            data4 = self.trip4.getTRIPData()
            data5 = self.trip5.getTRIPData()
            self.settings[self.numInfo[0]] = [data0, data1, data2, data3, data4, data5]

    def getSettings(self):
        """Calls setSettings and returns the settings dictionary."""
        self.setSettings()
        return self.settings

    def passSettings(self, settings):
        """Takes as input an entire settings dictionary and overwrites self.settings. Calls setFields."""
        self.settings = settings
        self.setFields()

class TRIPpage(wx.Panel):
    def __init__(self, parent, ID, trip):
        """The constructor for the pages for the individual TRIPs."""
        wx.Panel.__init__(self, parent, ID, size = (400, 480))
        # It knows what trip it is.
        self.trip = trip
        self.numInfo = (None, None, None)
        # The default (blank) top label.
        self.top = [None for i in range(6)]
        self.top[0] = TextLabel(self, 'coral', 'FEB', pos = (2, 5), size = (40, 20))
        self.top[1] = TextLabel(self, 'wheat', '', pos = (42, 5), size = (40, 20))
        self.top[2] = TextLabel(self, 'coral', 'CH', pos = (84, 5), size = (40, 20))
        self.top[3] = TextLabel(self, 'wheat', '', pos = (124, 5), size = (40, 20))
        self.top[4] = TextLabel(self, 'coral', 'CROC', pos = (166, 5), size = (45, 20))
        self.top[5] = TextLabel(self, 'wheat', '', pos = (211, 5), size = (40, 20))
        # The GUI is in default mode when self.expand is False.
        self.expand = False
        # The ScrolledWindow widget is the parent of the fields.
        self.scroll = wx.ScrolledWindow(self, -1, pos = (2, 30), size = (305, 460))
        self.scroll.SetScrollbars(0, 15, 250, 35)
        # Creates the Read, Write, and Write all FEBs buttons.
        self.write = wx.Button(self, -1, "WRITE", size = (85, 26), pos = (395, 36))
        self.write.SetBackgroundColour('coral')
        self.write.Bind(wx.EVT_BUTTON, self.writeInfo)
        self.read = wx.Button(self, -1, "READ", size = (85, 26), pos = (395, 67))
        self.read.SetBackgroundColour('coral')
        self.read.Bind(wx.EVT_BUTTON, self.readInfo)
        self.writeAll = wx.Button(self, -1, "WRITE ALL FEBs", size = (125, 26), pos = (355, 98))
        self.writeAll.SetBackgroundColour('coral')
        self.writeAll.Bind(wx.EVT_BUTTON, self.writeAllInfo)
        # Regardless of mode, there are default and advanced fields and labels.
        self.defaultLabels = [None for i in range(3)]
        self.advancedLabels = [None for i in range(20)]
        self.defaultFields = [None for i in range(3)]
        self.advancedFields = [None for i in range(20)]
        self.labelList = ['IBP', 'IBBNFALL', 'IFF', 'IBPIFF1REF', 'IBPOPAMP', 'IB_T', 'IFFP2', 'IBCOMP', 'VREF', 'VTH', 'GAIN',
                          'PIPEDEL', 'IRSEL', 'IWSEL', 'INJEX0', 'INJB0', 'INJB1', 'INJB2', 'INJB3', 'INJEX33']
        self.defaultList = ['60', '120', '0', '160', '40', '0', '0', '20', '160', '240', '11', '11', '3', '3', '0', '0', '0', '0', '0', '0']
        # Initially draws both Default and Advanced GUIs. The Advanced GUI will initially hide itself.
        self.drawDefaultGUI()
        self.drawAdvancedGUI()

    def drawTRIPTop(self, (feb, ch, croc)):
        """Called by the Choicebook's function, draws the top label. Also sets the numInfo variable."""
        self.numInfo = (int(feb), int(ch), int(croc))
        for i in [1, 3, 5]:
            self.top[i].Destroy()
        self.top[1] = TextLabel(self, 'wheat', feb, pos = (42, 5), size = (40, 20))
        self.top[3] = TextLabel(self, 'wheat', ch, pos = (124, 5), size = (40, 20))
        self.top[5] = TextLabel(self, 'wheat', croc, pos = (211, 5), size = (40, 20))

    def drawDefaultGUI(self):
        """Draws the default GUI fields and labels, and shows them."""
        j = 0
        for i in [8, 9, 10]:
            self.defaultLabels[j] = TextLabel(self.scroll, 'coral', self.labelList[i], pos = (5, 25 * j + 5), textpos = (1, 3))
            self.defaultFields[j] = wx.TextCtrl(self.scroll, -1, self.defaultList[i], size = (130, 23), pos = (137, 25 * j + 5))
            j += 1
        # The toggle button initially reads 'Show Advanced GUI'.
        self.toggle = wx.Button(self, -1, 'Show Advanced GUI', size = (160, 26), pos = (320, 5))
        self.toggle.SetBackgroundColour('coral')
        self.toggle.Bind(wx.EVT_BUTTON, self.flopAndDraw)

    def drawAdvancedGUI(self):
        """Draws the advanced GUI fields and labels., which are initially hidden."""
        for i in range(20):
            self.advancedLabels[i] = TextLabel(self.scroll, 'coral', self.labelList[i], pos = (5, 25 * i + 5), textpos = (1, 3))
            self.advancedFields[i] = wx.TextCtrl(self.scroll, -1, self.defaultList[i], size = (130, 23), pos = (137, 25 * i + 5))
            self.advancedLabels[i].Hide()
            self.advancedFields[i].Hide()

    def writeInfo(self, event):
        """For now, prints the values for the advanced fields to the Description tab, regardless of what mode you are in."""
        if self.numInfo == (None, None, None):
            print "ERROR: Choose a TRIP chip from the tree."
        else:
            print "For CROC " + str(self.numInfo[2]) + ", Channel " + str(self.numInfo[1]) + ", FEB " + str(self.numInfo[0]) + ", TRIP " + str(self.trip) + ":" 
        for i in range(20):
            print self.advancedFields[i].GetValue()

    def writeAllInfo(self, event):
        """For now, prints the values for the advanced fields to the Description tab, regardless of what mode you are in."""
        print "For all FEBs, all TRIPS:"
        for i in range(20):
            print self.advancedFields[i].GetValue()

    def readInfo(self, event):
        """For now, changes the value of all fields to 'READ IN VALUE' to prove that this works."""
        for i in range(20):
            self.advancedFields[i].SetValue('READ IN VALUE')
        for i in range(3):
            self.defaultFields[i].SetValue('READ IN VALUE')
    
    def flopAndDraw(self, event):
        """The callback for the toggle button. Saves all data entered in the GUI, then hides the currently displayed
        fields, flops self.expand and shows the other fields. Also redraws the toggle button."""
        data = self.getTRIPData()
        whichFields = [8, 9, 10]
        if self.expand:
            toggleButton = 'Show Advanced GUI'
            for i in range(20):
                self.advancedLabels[i].Hide()
                self.advancedFields[i].Hide()
            for i in range(3):
                self.defaultLabels[i].Show()
                self.defaultFields[i].Show()
                try:
                    self.defaultFields[i].SetValue(data[whichFields[i]])
                except AttributeError:
                    self.defaultFields[i].Select(n = data[whichFields[i]])
        else:
            toggleButton = 'Show Default GUI'
            for i in range(3):
                self.defaultLabels[i].Hide()
                self.defaultFields[i].Hide()
                try:
                    self.advancedFields[whichFields[i]].SetValue(data[whichFields[i]])
                except AttributeError:
                    self.advancedFields[whichFields[i]].Select(n = data[whichFields[i]])
            for i in range(20):
                self.advancedLabels[i].Show()
                self.advancedFields[i].Show()
        self.toggle.Destroy()
        self.toggle = wx.Button(self, -1, toggleButton, size = (160, 26), pos = (320, 5))
        self.toggle.SetBackgroundColour('coral')
        self.toggle.Bind(wx.EVT_BUTTON, self.flopAndDraw)
        self.scroll.Scroll(0, 0)
        self.expand = not self.expand

    def getTRIPData(self):
        """Returns a list of data from an individual TRIP chip of an FEB. Returns the entries of all 20
        advanced GUI fields regardless of whether or not you are in advance mode."""
        data = []
        if not self.expand:
            # Then the last change was made in default mode, so we store the defaultFields values of the applicable fields.
            whichFields = [8, 9, 10]
            j = 0
            for i in range(20):
                if i in whichFields:
                    try:
                        data.append(self.defaultFields[j].GetValue())
                    except AttributeError:
                        data.append(self.defaultFields[j].GetCurrentSelection())
                    j += 1
                else:
                    try:
                        data.append(self.advancedFields[i].GetValue())
                    except AttributeError:
                        data.append(self.advancedFields[i].GetCurrentSelection())
        else:
            for i in range(20):
                try:
                    data.append(self.advancedFields[i].GetValue())
                except AttributeError:
                    data.append(self.advancedFields[i].GetCurrentSelection())
        return data

    def setFields(self, settings):
        """Updates the values of all fields with information from the list passed as input. This input is not
        a full settings dictionary, but a list of data for one single TRIP chip."""
        self.scroll.Scroll(0, 0)
        for i in range(20):
            self.advancedFields[i].SetValue(settings[i])
        whichFields = [8, 9, 10]
        for i in range(3):
            self.defaultFields[i].SetValue(settings[whichFields[i]])

class FLASH(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the FLASH tab in the Notebook."""
        wx.Panel.__init__(self, parent, ID, size = (400, 500))
        self.numInfo = (None, None, None)
        # Draws the initial (blank) top label.
        self.top = [None for i in range(6)]
        self.top[0] = TextLabel(self, 'coral', 'FEB', pos = (2, 5), size = (40, 20))
        self.top[1] = TextLabel(self, 'wheat', '', pos = (42, 5), size = (40, 20))
        self.top[2] = TextLabel(self, 'coral', 'CH', pos = (84, 5), size = (40, 20))
        self.top[3] = TextLabel(self, 'wheat', '', pos = (124, 5), size = (40, 20))
        self.top[4] = TextLabel(self, 'coral', 'CROC', pos = (166, 5), size = (45, 20))
        self.top[5] = TextLabel(self, 'wheat', '', pos = (211, 5), size = (40, 20))
        self.readToFile = wx.Button(self, -1, "Read Memory To File", size = (200, 26), pos = (5, 30))
        self.readToFile.SetBackgroundColour('coral')
        self.readToFile.Bind(wx.EVT_BUTTON, self.readMemory)
        self.writeToFile = wx.Button(self, -1, "Write File To Memory", size = (200, 26), pos = (5, 61))
        self.writeToFile.SetBackgroundColour('coral')
        self.writeToFile.Bind(wx.EVT_BUTTON, self.writeMemory)

    def readMemory(self, event):
        """Eventually: reads from memory. For now, just prints to the Description tab."""
        print "reading memory"

    def writeMemory(self, event):
        """Eventually: writes to memory. For now, just prints to the Description tab."""
        if self.numInfo == (None, None, None):
            print "ERROR: Choose a FLASH chip from the tree."
        else:
            print "For CROC " + str(self.numInfo[2]) + ", Channel " + str(self.numInfo[1]) + ", FEB " + str(self.numInfo[0]) + ":"
            print "Writing file to memory."
        
    def drawFLASHTop(self, (feb, ch, croc)):
        """Takes as input a tuple with FEB, Ch and CROC numbers and draws the corresponding top label. Also sets
        the numInfo variable accordingly."""
        self.numInfo = (int(feb), int(ch), int(croc))
        for i in [1, 3, 5]:
            self.top[i].Destroy() 
        self.top[1] = TextLabel(self, 'wheat', feb, pos = (42, 5), size = (40, 20))
        self.top[3] = TextLabel(self, 'wheat', ch, pos = (124, 5), size = (40, 20))
        self.top[5] = TextLabel(self, 'wheat', croc, pos = (211, 5), size = (40, 20))
        
class ReadHV(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the Read HV tab in the Notebook. If the tab is accessed by a direct tab click, both the
        Read Voltages and Monitor Voltages options will be hidden. The tab should be accessed by those options
        in the Actions menu, which will show the proper fields."""
        wx.Panel.__init__(self, parent, ID, size = (400, 500))
        self.bigText = wx.TextCtrl(self, -1, '', size = (480, 350), pos = (3, 3), style = wx.TE_MULTILINE)

    def clear(self):
        """Clears the page and destroys the Read and Monitor fields. Called when a user clicks the Read HV tab."""
        self.bigText.SetValue('')
        try:
            self.adcCounts.Destroy()
            self.read.Destroy()
            self.switch.Destroy()
            self.adcLabel.Destroy()
        except AttributeError:
            pass
        try:
            self.timer.Destroy()
            self.monitor.Destroy()
            self.timerLabel.Destroy()
        except AttributeError:
            pass
        
    def readVoltages(self):
        """Creates the Read Voltages options. Called when the user selects this option in the Actions menu."""
        text = "Displays FEBs with HVActual differing from HVTarget \nby an amount greater than that specified below."
        self.bigText.SetValue(text)
        self.adcCounts = wx.TextCtrl(self, -1, '', size = (80, 20), pos = (3, 360))
        self.adcLabel = wx.StaticText(self, -1, 'ADC Counts', pos = (86, 363))
        self.read = wx.Button(self, -1, 'Read', size = (100, 26), pos = (180, 357))
        self.read.SetBackgroundColour('grey')
        self.read.Bind(wx.EVT_BUTTON, self.hvRead)
        self.switch = wx.Button(self, -1, 'Switch to Auto', size = (140, 26), pos = (285, 357))
        self.switch.SetBackgroundColour('grey')
        self.switch.Bind(wx.EVT_BUTTON, self.switchToAuto)

    def monitorVoltages(self):
        """Creates the Monitor Voltages options. Called when the user selects this option in the Actions menu."""
        text = "Monitor FEBs' HV at time interval defined by Monitor Timer (sec)."
        self.bigText.SetValue(text)
        self.timer = wx.TextCtrl(self, -1, '', size = (50, 20), pos = (3, 360))
        self.timerLabel = wx.StaticText(self, -1, 'Monitor Timer (sec)', pos = (55, 363))
        self.monitor = wx.Button(self, -1, 'Monitor', size = (80, 26), pos = (200, 357))
        self.monitor.SetBackgroundColour('grey')
        self.monitor.Bind(wx.EVT_BUTTON, self.hvMonitor)
        
    def hvRead(self, event):
        """For now, prints the value in the ADC Counts text entry field to the Description tab, if it is a number."""
        val = self.adcCounts.GetValue()
        if val == '':
            print "No value entered for ADC Counts."
        else:
            try:
                float(val)
                print "ADC Counts is " + val + "."
            except ValueError:
                print "ADC Counts must be a number."
        
    def switchToAuto(self, event):
        """For now, prints to the Description tab."""
        print "Now in Auto mode."

    def hvMonitor(self, event):
        """For now, prints the value in the Monitor Timer text entry field to the Description tab, if it is a number."""
        val = self.timer.GetValue()
        if val == '':
            print "No value entered for Monitor Timer."
        else:
            try:
                float(val)
                print "Monitor Timer is " + val + " seconds."
            except ValueError:
                print "Monitor Timer must be a number of seconds."
        
class LIBox(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the LI Box tab in the Notebook. There is a Default and an Advanced GUI."""
        wx.Panel.__init__(self, parent, ID, size = (700, 600))
        # The toggle button for the initial Default mode.
        self.toggle = wx.Button(self, -1, 'Show Advanced GUI', size = (160, 26), pos = (320, 5))
        self.toggle.SetBackgroundColour('coral')
        self.toggle.Bind(wx.EVT_BUTTON, self.flopAndDraw)
        self.expand = False
        # The LI Commands box.
        wx.StaticBox(self, -1, "LI Commands (hex values)", size = (580, 275), pos = (5, 30))
        self.initializeLI = wx.Button(self, -1, "Initialize LI Box", size = (130, 26), pos = (10, 49))
        self.initializeLI.SetBackgroundColour('coral')
        self.initializeLI.Bind(wx.EVT_BUTTON, self.initialize)
        self.selectLED = wx.Button(self, -1, "Select LED Slot", size = (130, 26), pos = (10, 78))
        self.selectLED.SetBackgroundColour('coral')
        self.selectLED.Bind(wx.EVT_BUTTON, self.select)
        self.LEDchoices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'Q', 'R', 'S', 'T', 'U', 'V']
        self.LEDmenu = wx.Choice(self, -1, choices = self.LEDchoices, size = (50, 24), pos = (140, 79))
        self.pulseWidth = wx.Button(self, -1, "Pulse Width", size = (130, 26), pos = (10, 107))
        self.pulseWidth.SetBackgroundColour('coral')
        self.pulseWidth.Bind(wx.EVT_BUTTON, self.getPulseWidth)
        self.pwChoices = ['0', '1', '2', '3', '4', '5', '6', '7']
        self.pwMenu = wx.Choice(self, -1, choices = self.pwChoices, size = (50, 24), pos = (140, 108))
        self.pulseHeight = wx.Button(self, -1, "Pulse Height", size = (130, 26), pos = (10, 136))
        self.pulseHeight.SetBackgroundColour('coral')
        self.pulseHeight.Bind(wx.EVT_BUTTON, self.getPulseHeight)
        self.phField = wx.TextCtrl(self, -1, '3FF', size = (50, 24), pos = (140, 137))
        self.triggerRate = wx.Button(self, -1, "Trigger Rate", size = (130, 26), pos = (10, 165))
        self.triggerRate.SetBackgroundColour('coral')
        self.triggerRate.Bind(wx.EVT_BUTTON, self.getTriggerRate)
        self.trField = wx.TextCtrl(self, -1, 'FFFF', size = (50, 24), pos = (140, 166))
        self.trigInt = wx.Button(self, -1, "Trigger Internal", size = (130, 26), pos = (195, 49))
        self.trigInt.SetBackgroundColour('coral')
        self.trigInt.Bind(wx.EVT_BUTTON, self.getTrigInt)
        self.trigExt = wx.Button(self, -1, "Trigger External", size = (130, 26), pos = (195, 78))
        self.trigExt.SetBackgroundColour('coral')
        self.trigExt.Bind(wx.EVT_BUTTON, self.getTrigExt)
        self.LIoff = wx.Button(self, -1, "LI Active Is Off", size = (130, 26), pos = (195, 107))
        self.LIoff.SetBackgroundColour('coral')
        self.LIoff.Bind(wx.EVT_BUTTON, self.getLIoff)
        self.sendFile = wx.Button(self, -1, "Send File", size = (130, 26), pos = (195, 136))
        self.sendFile.SetBackgroundColour('coral')
        self.sendFile.Bind(wx.EVT_BUTTON, self.getSendFile)
        # The LI Commands Hardcoded sub-box.
        wx.StaticBox(self, -1, "LI Commands Hardcoded", size = (315, 107), pos = (10, 194))
        self.initLED = wx.Button(self, -1, "Init LED Slot", size = (125, 26), pos = (15, 213))
        self.initLED.SetBackgroundColour('coral')
        self.initLED.Bind(wx.EVT_BUTTON, self.getInitLED)
        self.initLEDmenu = wx.Choice(self, -1, choices = self.LEDchoices, size = (50, 24), pos = (140, 214))
        self.initAll = wx.Button(self, -1, "Init ALL Slots", size = (125, 26), pos = (195, 213))
        self.initAll.SetBackgroundColour('coral')
        self.initAll.Bind(wx.EVT_BUTTON, self.getInitAll)
        self.zeroPE = wx.Button(self, -1, "Zero PE", size = (100, 26), pos = (15, 242))
        self.zeroPE.SetBackgroundColour('coral')
        self.zeroPE.Bind(wx.EVT_BUTTON, self.getZeroPE)
        self.onePE = wx.Button(self, -1, "One PE", size = (99, 26), pos = (118, 242))
        self.onePE.SetBackgroundColour('coral')
        self.onePE.Bind(wx.EVT_BUTTON, self.getOnePE)
        self.maxPE = wx.Button(self, -1, "Max PE", size = (100, 26), pos = (220, 242))
        self.maxPE.SetBackgroundColour('coral')
        self.maxPE.Bind(wx.EVT_BUTTON, self.getMaxPE)
        self.minusX = wx.Button(self, -1, "-X", size = (99, 26), pos = (118, 271))
        self.minusX.SetBackgroundColour('coral')
        self.minusX.Bind(wx.EVT_BUTTON, self.getMinusX)
        # The big text field.
        self.bigText = wx.TextCtrl(self, -1, size = (250, 252), pos = (330, 49), style = wx.TE_MULTILINE)
        # The advanced portion of the GUI, initially hidden.
        self.adv = LIAdvanced(self, -1)
        self.adv.Hide()

    def flopAndDraw(self, event):
        """Flops the value of self.expand and shows or hides the Advanced GUI accordingly. Also redraws toggle button."""
        self.toggle.Destroy()
        if self.expand:
            toggleButton = 'Show Advanced GUI'
            self.adv.Hide()
        else:
            toggleButton = 'Show Default GUI'
            self.adv.Show()
        self.expand = not self.expand
        self.toggle = wx.Button(self, -1, toggleButton, size = (160, 26), pos = (320, 5))
        self.toggle.SetBackgroundColour('coral')
        self.toggle.Bind(wx.EVT_BUTTON, self.flopAndDraw)

    def initialize(self, event):
        """A callback for the Initialize LED Box button. For now, prints to the Description tab."""
        print "Initialize LED Box."

    def select(self, event):
        """A callback for the Select LED Slot button. For now, prints the selected LED to the Description tab."""
        selection = self.LEDmenu.GetCurrentSelection()
        if selection != -1:
            print "LED " + self.LEDchoices[selection] + " is selected."
        else:
            print "No LED selected."

    def getPulseWidth(self, event):
        """A callback for the Pulse Width button. For now, prints the selected value to the Description tab."""
        selection = self.LEDmenu.GetCurrentSelection()
        if selection != -1:
            print "Pulse width is " + self.pwChoices[selection] + "."
        else:
            print "No pulse width selected."

    def getPulseHeight(self, event):
        """A callback for the Pulse Height button. For now, prints the entered value to the Description tab."""
        val = self.phField.GetValue()
        if val != '':
            print "Pulse height is " + val + "."
        else:
            print "No pulse height entered."

    def getTriggerRate(self, event):
        """A callback for the Trigger Rate button. For now, prints the entered value to the Description tab."""
        val = self.trField.GetValue()
        if val != '':
            print "Trigger rate is " + val + "."
        else:
            print "No trigger rate entered."

    def getTrigInt(self, event):
        """A callback for the Trigger Internal button. For now, prints to the Description tab."""
        print "Trigger internal."

    def getTrigExt(self, event):
        """A callback for the Trigger External button. For now, prints to the Description tab."""
        print "Trigger external."

    def getLIoff(self, event):
        """A callback for the LI Active Is Off button. For now, prints to the Description tab."""
        print "The LI is off."

    def getSendFile(self, event):
        """A callback for the Send File button. For now, prints to the Description tab."""
        print "File sent."

    def getInitLED(self, event):
        """A callback for the Init LED Slot button. For now, prints the selected LED to the Description tab."""
        selection = self.initLEDmenu.GetCurrentSelection()
        if selection != -1:
            print "LED " + self.LEDchoices[selection] + " initialized."
        else:
            print "No LED selected."

    def getInitAll(self, event):
        """A callback for the Init All Slots button. For now, prints to the Description tab."""
        print "20 LEDs initialized."

    def getZeroPE(self, event):
        """A callback for the Zero PE button. For now, prints to the Description tab."""
        print "Zero PE"

    def getOnePE(self, event):
        """A callback for the One PE button. For now, prints to the Description tab."""
        print "One PE"

    def getMaxPE(self, event):
        """A callback for the Max PE button. For now, prints to the Description tab."""
        print "Max PE"

    def getMinusX(self, event):
        """A callback for the -X button. For now, prints to the Description tab."""
        print "Someone has clicked the mysterious -X button."

class LIAdvanced(wx.Panel):
    def __init__(self, parent, ID):
        """Creates the Advanced portion of the LI Box tab. This is initially hidden."""
        wx.Panel.__init__(self, parent, ID, size = (700, 235), pos = (0, 310))
        # The RS-232 box.
        wx.StaticBox(self, -1, "RS-232", size = (520, 250), pos = (5, 0))
        self.liWrite = wx.Button(self, -1, "Write", size = (80, 26), pos = (10, 19))
        self.liWrite.SetBackgroundColour('coral')
        self.liWrite.Bind(wx.EVT_BUTTON, self.LIwrite)
        self.clearTX = wx.Button(self, -1, "Clear TX", size = (80, 26), pos = (10, 48))
        self.clearTX.SetBackgroundColour('coral')
        self.clearTX.Bind(wx.EVT_BUTTON, self.doClearTX)
        self.liWritefield = wx.TextCtrl(self, -1, '', size = (425, 55), pos = (95, 19), style = wx.TE_MULTILINE)
        self.liRead = wx.Button(self, -1, "Read", size = (80, 26), pos = (10, 80))
        self.liRead.SetBackgroundColour('coral')
        self.liRead.Bind(wx.EVT_BUTTON, self.LIread)
        self.clearRX = wx.Button(self, -1, "Clear RX", size = (80, 26), pos = (10, 109))
        self.clearRX.SetBackgroundColour('coral')
        self.clearRX.Bind(wx.EVT_BUTTON, self.doClearRX)
        self.liReadfield = wx.TextCtrl(self, -1, '', size = (425, 55), pos = (95, 80), style = wx.TE_MULTILINE)
        # The RS-232 Settings sub-box.
        wx.StaticBox(self, -1, "RS-232 Settings", size = (510, 90), pos = (10, 140))
        self.findSerialPorts = wx.Button(self, -1, "Find Serial Ports", size = (130, 26), pos = (15, 159))
        self.findSerialPorts.SetBackgroundColour('coral')
        self.findSerialPorts.Bind(wx.EVT_BUTTON, self.findPorts)
        self.configSerialPorts = wx.Button(self, -1, "Config Serial Ports", size = (135, 26), pos = (148, 159))
        self.configSerialPorts.SetBackgroundColour('coral')
        self.configSerialPorts.Bind(wx.EVT_BUTTON, self.configPorts)
        timeout = TextLabel(self, 'coral', "Timeout (ms) W,R", size = (122, 20), pos = (286, 162))
        self.timeout1 = wx.TextCtrl(self, -1, '100', size = (45, 20), pos = (411, 162))
        self.timeout2 = wx.TextCtrl(self, -1, '100', size = (45, 20), pos = (459, 162))
        # The menu options for each of the Choice menus.
        self.choices1 = ['COM1']
        self.choices2 = ['300', '600', '1200', '2400', '9600', '14400', '19200', '38400', '57600', '115200', '128000']
        self.choices3 = ['None', 'Odd', 'Even', 'Mark', 'Space']
        self.choices4 = ['8']
        self.choices5 = ['None', 'One', 'Two', '1.5']
        self.choices6 = ['None', 'XOnXOff', 'Request ToSend', 'Request ToSendX']
        # The Choice menus themselves, followed by their default selections.
        self.menu1 = wx.Choice(self, -1, choices = self.choices1, size = (73, 24), pos = (15, 188))
        self.menu2 = wx.Choice(self, -1, choices = self.choices2, size = (88, 24), pos = (89, 188))
        self.menu3 = wx.Choice(self, -1, choices = self.choices3, size = (73, 24), pos = (178, 188))
        self.menu4 = wx.Choice(self, -1, choices = self.choices4, size = (43, 24), pos = (252, 188))
        self.menu5 = wx.Choice(self, -1, choices = self.choices5, size = (68, 24), pos = (296, 188))
        self.menu6 = wx.Choice(self, -1, choices = self.choices6, size = (150, 24), pos = (365, 188))
        self.menu1.Select(n = 0)
        self.menu2.Select(n = 4)
        self.menu3.Select(n = 0)
        self.menu4.Select(n = 0)
        self.menu5.Select(n = 1)
        self.menu6.Select(n = 0)

    def LIwrite(self, event):
        """A callback for the Write button. For now, prints the value of the text box to the Description tab."""
        print self.liWritefield.GetValue()
                      
    def doClearTX(self, event):
        """A callback for the Clear TX button. For now, clears any text written in the box."""
        self.liWritefield.SetValue('')

    def LIread(self, event):
        """A callback for the Read button. For now, prints the value of the text box to the Description tab."""
        print self.liReadfield.GetValue()

    def doClearRX(self, event):
        """A callback for the Clear RX button. For now, clears any text written in the box."""
        self.liReadfield.SetValue('')

    def findPorts(self, event):
        """A callback for the Find Serial Ports button. For now, prints to the Description tab."""
        print "Find Serial Ports."

    def configPorts(self, event):
        """A callback for the Config Serial Ports button. For now, prints to the Description tab."""
        print "Config Serial Ports."

def main():
    """The main function instantiates a PySimpleApp, calls the main frame class SCTree (which in turn calls all
    of the Notebook pages), and shows the GUI."""
    app = wx.PySimpleApp()
    frame = SCTree()
    frame.Show(1)
    app.MainLoop()

# If the program is called directly, calls the main function to create the GUI.
# One could, in theory, import classes from this program for use in another GUI without this GUI running.
if __name__ == "__main__":
    main()
