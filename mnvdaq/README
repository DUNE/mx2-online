This file is current as of 2009.September.24 - GNP

To build the MINERvA Developmental DAQ (devdaq) you need to first install and build CAEN driver libraries 
to interface with the CAEN v2718 VME Controller and a2818 PCI Interface Card.  These drivers are available
on the CAEN website (http://www.caen.it/nuclear/index.php) and specific drivers for SLF4.6 and SLF5.3 have 
been stored on the MINERvA Plone (https://plone3.fnal.gov/P0/Minerva).  Note that the drivers for SLF4.6 
must be patched (the patch is stored on the MINERvA Plone).

Store the CAEN libraries in a directory named ${WORKROOT}/CAENVMElib/lib, where $WORKROOT is a directory 
of your choosing.  If you attempt to install the CAEN drivers by untarring the packages and following the 
contained instructions in $WORKROOT you will end up with the correct structure.  Note that even if you do 
not intend to run the DAQ for acquisition, you still need the CAEN libraries to build the code.

Once the CAEN libraries are installed, go to $WORKROOT and create a mnvonline/ directory to hold the DAQ 
and (eventually) SlowControl code.  Within mnvonline/ run a CVS checkout on the package devdaq.  Make sure 
you have the following environment variables set and a valid kerberos ticket to access the MINERvA CVS 
repository:
	CVSROOT=minervacvs@cdcvs.fnal.gov:/cvs/minervasw
	CVS_RSH=ssh

Inside the devdaq/ directory you will find two setup scripts.  It is a good idea to read these scripts 
carefully before proceeding because they configure the environment for the build.  The environments 
are slightly different at Rutgers University and FNAL (the two main current development locations).  The 
location is set by a $LOCALE environment variable.  Set your own $LOCALE variable or mimic the directory 
structure of another $LOCALE and use that value for your own $LOCALE.

Once you have configured your setup scripts, build the DAQ with the following steps:

1) Go to $DAQROOT/

2) source setup_daqbuild.sh; source setup_etbuild.sh - Note that the first of these actually defines 
$DAQROOT for your environment and the second script only needs to be run when building ET (i.e., only the 
first time the DAQ software is installed).

3) Now build ET: untar et-9.0.tar.gz and copy BMS.tar.gz into et_9.0/

4) Go to et_9.0 and untar BMS.tar.gz.  Then type "gmake install"

5) Check ${ET_LIBROOT}/lib and make sure you have libet.a, libet_remote.so, and libet.so.

6) Return to $DAQROOT and type "gmake all"

7) Check ${DAQROOT}/bin/ for 
	event_builder
	minervadaq
	daq_master
	daq_slave_service
And check ${DAQROOT}/lib/ for 
	libcaeninterface.so
	libevent_structure.so
	libhardware.so
	libminerva_acquire.so

8) If you are missing any of these, read the Makefile and try building each package one at a time and check for 
errors.  Most likely, an environment variable has been incorrectly set.

9) One final point to be aware of is that the DAQ can be compiled to run as a single PC system or a networked, 
multi-PC system.  Currently, these settings are controlled in compiler flags set in the Makefiles.  Be sure 
you have built the right version of the DAQ for the hardware you have.

ET in REMOTE MODE

replace the et_start.c in the et_9.0/src/examples directory with the et_start.c main mnvdaq directory and run
make install in et_9.0.

Make sure that et_start.c in mnvdaq directory has the correct internet addresses BEFORE you remake ET.



