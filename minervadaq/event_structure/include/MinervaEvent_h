#ifndef MinervaEvent_h
#define MinervaEvent_h

#include "feb.h"

#include <boost/thread/mutex.hpp>

/*! \class MinervaHeader
 *
 * \brief Class which holds and manipulates data in event block headers
 *
 * This class holds and sets up MINERvA event headers for data blocks.  
 * It is used by the event builder to place headers at the top of event blocks 
 * before sending data to a file for storage.
 *
 */
class MinervaHeader {
	private:
		unsigned short bank_header[4]; /*!<The Minerva Header for each frame */
		unsigned short chan_number; /*!<the channel number for data having a header attached */
		boost::mutex mutex; /*!<A BOOST mutual exclusion for threaded operation */
		log4cpp::Appender* hdrAppender; //log4cpp appender for printing log statements. 

	public:
		/*! the constructor */
		MinervaHeader(int crateID, int crocID, int chanID, 
			int bank, int feb_number, int firmware, int hit, int length, 
			log4cpp::Appender* appender=0);
		/*! default constructor */
		MinervaHeader(unsigned char crate, log4cpp::Appender* appender=0);
		/*! default destructor */
		~MinervaHeader() { };
		unsigned short inline GetChanNo() {return chan_number;};
		// All we need is one bank header array...
		unsigned short inline *GetBankHeader() {return bank_header;};
};

/*! \class MinervaEvent 
 *  \brief This class will build the event and then pass eventData to be written to disk & displayed.
 */
class MinervaEvent {
	private:
		boost::mutex mutex; /*!<A BOOST mutual exclusion for threaded operation*/
		unsigned char *data_block; /*!<what to put the data into */
		unsigned char event_block[DAQ_HEADER]; /*!<a special buffer to hold onto the event info while we process
		everything else. */
		log4cpp::Appender* evtAppender; //log4cpp appender for printing log statements. 

	public:
		/*! the default constructor */
		MinervaEvent() { };
		/*! the constructor */
		MinervaEvent(unsigned char det, unsigned short int config, int run, int sub_run, 
			unsigned short int trig, unsigned char ledGroup, unsigned char ledLevel, 
			unsigned long long g_gate, unsigned int gate, unsigned long long trig_time, 
			unsigned short int error, unsigned int minos, unsigned int read_time, 
			MinervaHeader *header,  unsigned short int nADCFrames, unsigned short int nDiscFrames, 
			unsigned short int nFPGAFrames ,log4cpp::Appender* appender=0);
		/*! the default destructor */
		~MinervaEvent() { };
		template <class X> void MakeDataBlock(X *frame, MinervaHeader *header);
		inline unsigned char* GetDataBlock() {return data_block;};
		void DeleteDataBlock() {delete [] data_block;};
		unsigned char inline GetEventBlock(int i) {return event_block[i];};
};

#endif
