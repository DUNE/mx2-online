#
# CODA top level Makefile
#

MAKEFILE = Makefile

# if using vxworks, use different set of the lowest level makefiles
ifeq ($(BMS_OS), vxworks)
  ifndef BMS_ARCH
    $(error "Need to define BMS_ARCH if using BMS_OS = vxworks")
  endif
endif

ifndef CODA_HOME
  $(warning "Should define CODA_HOME")
  # assume we're in BMS directory and is at the toplevel to the CODA distribution
  CODA_HOME = ..
endif

# list of possible targets
TARGETS = cMsg evio et codaObject etObject

.PHONY : first help tar

first: $(TARGETS)

help:
	@echo "make -f Makefile.CODA [target] [ARG=<option>]"
	@echo "   target:"
	@echo "      <blank>   - make all software packages"
	@echo "      cMsg      - make cMsg software package"
	@echo "      evio      - make evio software package"
	@echo "      et        - make et   software package"
	@echo "   options:"
	@echo "      <blank>   - make C,C++ source"
	@echo "      all       - make C,C++ source"
	@echo "      env       - list env variables"
	@echo "      mkdirs    - make necessary directories for C,C++"
	@echo "      install   - install all headers and compiled files for C,C++"
	@echo "      uninstall - uninstall all headers and compiled files for C,C++"
	@echo "      relink    - delete libs and executables, and relink object files"
	@echo "      clean     - delete all exec, library, object, and dependency files"
	@echo "      distClean - clean and remove hidden OS directory"
	@echo "      execClean - delete all exec and library files"
	@echo "      doc       - make doxygen and javadoc documentation"
	@echo "      java      - make java classes"
	@echo "      javaClean - delete java classes"
	@echo "      javaDistClean - remove java build dir and javadoc dir"

tar:
	-$(RM) coda-3.0.tar.gz;
	tar -X tarexclude -C .. -c -z -f coda-3.0.tar.gz coda

# Use this pattern rule for all other targets
%:
	cd $(CODA_HOME)/$@; $(MAKE) -f $(MAKEFILE) $(ARG);
