#
# Makefile for building a vxworks object file with everything in it
#

LIB_NAME = lib$(MODULE_NAME)$(DEBUG_SUFFIX).o
VX_LIB = $(LIB_DIR)/$(LIB_NAME)

# Redefine OBJS to include debug suffixes (add _d to list of object names)
DOBJS = $(addsuffix $(DEBUG_SUFFIX).o,$(basename $(OBJS)))

OUTPUT_OPTION = -o $(OBJ_DIR)/$@
LINK_OBJS += $(addprefix $(OBJ_DIR)/,$(DOBJS))

# VPATH specifies a list of directories that make should search.
# Most often, the directories are expected to contain prerequisite
# files that are not in the current directory; however, make uses
# VPATH as a search list for both prerequisites and targets of rules.
VPATH = $(OBJ_DIR):$(BIN_DIR)


all: mkdirs $(DEPS) $(VX_LIB) $(OTHER_TARGETS)

# Note: first time thru $(addprefix $(OBJ_DIR)/, $?) is necessary to
# find objects. The next time they are found by VPATH and the directory
# name is automatically prefixed to prerequisites. That must be stripped
# off for subsequent makes and relinks, hence the "notdir" part.
$(VX_LIB): $(DOBJS)
	$(LD) -o $@ $(addprefix $(OBJ_DIR)/, $(notdir $?))

mkdirs:
	@mkdir -p $(LIB_DIR)
	@mkdir -p $(OBJ_DIR)
	@mkdir -p $(DEP_DIR)

# SunOS install does not have -p option to preserve timestamps so use cp
install: all
	@mkdir -p $(INSTALL_DIR)/$(BMS_OSNAME)/lib
	@mkdir -p $(INSTALL_DIR)/include
	@echo "Installing $(MODULE_NAME) header files:"
	@for i in $(notdir $(wildcard *.h *.hh *.hxx)); do \
	   echo "  $(INSTALL_DIR)/include/$$i"; \
	   cp -p $$i $(INSTALL_DIR)/include; \
           done;
	@echo "Installing $(MODULE_NAME) libraries:"
	@for i in $(notdir $(VX_LIB) $(OTHER_TARGETS)); do \
	   echo "  $(INSTALL_DIR)/$(BMS_OSNAME)/lib/$$i"; \
	   cp -p $(LIB_DIR)/$$i $(INSTALL_DIR)/$(BMS_OSNAME)/lib/$$i; \
           done;

uninstall: 
	@echo "Uninstalling $(MODULE_NAME) headers by removing:"
	@for i in $(notdir $(wildcard *.h *.hh *.hxx)); do \
	   echo "  $(INSTALL_DIR)/include/$$i"; \
	   rm -f $(INSTALL_DIR)/include/$$i; \
           done;
	@echo "Uninstalling $(MODULE_NAME) libraries:"
	@for i in $(notdir $(VX_LIB) $(OTHER_TARGETS)); do \
	   echo "  $(INSTALL_DIR)/$(BMS_OSNAME)/lib/$$i"; \
	   rm -f $(INSTALL_DIR)/$(BMS_OSNAME)/lib/$$i; \
           done;

relink: execClean all

clean:
	rm -rf $(LIB_DIR) $(OBJ_DIR) $(DEP_DIR) *.o *.bak *~ core

distClean: clean
	rm -rf .$(BMS_OSNAME)

execClean:
	rm -f $(VX_LIB) $(OTHER_TARGETS)

here: all
	@for i in $(notdir $(VX_LIB) $(OTHER_TARGETS)); do \
	   cp -p $(LIB_DIR)/$$i ./$$i; \
           done;

hereClean:
	rm -rf $(notdir $(VX_LIB) $(OTHER_TARGETS))


#
# The implicit rules for compiling n.c or n.cc into n.o are:
#COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
#%.o: %.c
#	$(COMPILE.c) $(OUTPUT_OPTION) $<
#
#COMPILE.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
#%.o: %.cc
#        $(COMPILE.cc) $(OUTPUT_OPTION) $<
#
