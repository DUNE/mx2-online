#
# This is a makefile holding definitions common to subsequent makefiles.
#
# This file is used (included) to build all the source in the current directory
# (anything with a .c, .cc, .cxx, or .cpp suffix) into libraries or executables
# depending on what kind of makefiles include this one.
#
# It is part of the BMS makefile system in which the idea is that a given
# directory will contain source that represents a library, in which case
# Makefile.libs is included after this one.
# Or ... the directory contains source for executables, in which case
# Makefile.bin is included after this one.
# 

.PHONY: mkdirs clean distClean execClean env all first install uninstall relink

# The first target is made by default when make is invoked with no
# arguments. We want to include other targets here (namely, depends
# files) so we need to make a dummy target appear first that calls
# the real default target which resides in either Makefile.bin or
# Makefile.libs

first: all

# Automatically include Makefile.local (if there is one) from the package.
# Only include it if it is called from the package (MAKELEVEL = 0 or 1).
# This typically sets variables like CODA_USE64BITS from the package's
# variables like ET_USE64BITS so include it here.
# TOPLEVEL should be set in the Makefile that includes this one (lowest level).
# This is to allow one to compile just a package (eg. et) without all of CODA.
ifdef TOPLEVEL
  ifeq ($(MAKELEVEL), 0)
    -include $(TOPLEVEL)/Makefile.local
  else
    ifeq ($(MAKELEVEL), 1)
      -include $(TOPLEVEL)/Makefile.local
    endif
  endif
endif

ifndef BMS_OS
  BMS_OS = $(shell uname)
endif

ifndef BMS_ARCH
  BMS_ARCH = $(shell uname -m)
endif

ifndef BMS_OSNAME
  BMS_OSNAME = $(BMS_OS)-$(BMS_ARCH)
endif

ifdef CODA_USE64BITS
  BMS_OSNAME = $(BMS_OS)-$(BMS_ARCH)-64
endif

RANLIB = ranlib

LIB_DIR = .$(BMS_OSNAME)/lib
BIN_DIR = .$(BMS_OSNAME)/bin
DEP_DIR = .$(BMS_OSNAME)/depends
OBJ_DIR = .$(BMS_OSNAME)/objects

# include working directory first
CFLAGS   += -I.
CXXFLAGS += -I.

ifndef INSTALL_DIR
  # if neither defined, error
  ifndef CODA_HOME
    $(error "Must define INSTALL_DIR or CODA_HOME env variable for installation")
  endif
  INSTALL_DIR =  $(CODA_HOME)
  CFLAGS    += -I$(CODA_HOME)/include
  CXXFLAGS  += -I$(CODA_HOME)/include
  LIB_DIRS  +=   $(CODA_HOME)/$(BMS_OSNAME)/lib
# else if INSTALL_DIR defined
else
  CFLAGS   += -I$(INSTALL_DIR)/include
  CXXFLAGS += -I$(INSTALL_DIR)/include
  LIB_DIRS +=   $(INSTALL_DIR)/$(BMS_OSNAME)/lib
  ifdef CODA_HOME
    # if different
    ifneq ($(INSTALL_DIR), $(CODA_HOME))
      CFLAGS   += -I$(CODA_HOME)/include
      CXXFLAGS += -I$(CODA_HOME)/include
      LIB_DIRS +=   $(CODA_HOME)/$(BMS_OSNAME)/lib
    endif
  endif
endif

# include software package makefiles
PACKAGE_MAKEFILES = $(foreach name,$(subst :, ,$(PACKAGES)),$(BMS_HOME)/Makefile.$(name))
ifdef PACKAGES
  include $(PACKAGE_MAKEFILES)
endif

# pick out all .c files
CSRC   += $(wildcard *.c)
# pick out all .cc, .cpp, and .cxx files
CXXSRC += $(wildcard *.cc *.cpp *.cxx)

# Put all objects you want to avoid creating dependencies for in NO_DEP_OBJS.
# Put all objects you don't want in libraries in NO_OBJS.
#  - basename extracts all but suffix of all C and C++ files in direcotry
#  - addsuffix adds .o to file names
#  - sort sorts list in lexical order removing duplicates - output is space-separated list
OBJECTS += $(sort $(addsuffix .o,$(basename $(CSRC) $(CXXSRC))))
# returns space-separated list of words in $(OBJS) that do NOT match any in $(NO_DEP_OBJS)
ODEPS  = $(filter-out $(NO_DEP_OBJS),$(OBJECTS))
# change .o to .d
DEPS  += $(ODEPS:.o=.d)
# now filter out objects you don't want in the library
OBJS  += $(filter-out $(NO_OBJS),$(OBJECTS))

ifndef MODULE_NAME
  MODULE_NAME = $(shell basename $(shell pwd))
endif

# Define these rules BEFORE OS makefiles are included so vxworks can override them later.
#
# Rules to make DEPENDS files from source. Note that these are similar to the
# rules in Makefile.lib, but uses the objects explicitly
# $@ is filename of target, $< is first prerequisite
%.d : %.cpp
	@$(DCXX) "$(basename $@).o" $(CXXFLAGS) $< > $(DEP_DIR)/$(basename $@).d
%.d : %.cc
	@$(DCXX) "$(basename $@).o" $(CXXFLAGS) $< > $(DEP_DIR)/$(basename $@).d
%.d : %.cxx
	@$(DCXX) "$(basename $@).o" $(CXXFLAGS) $< > $(DEP_DIR)/$(basename $@).d
%.d : %.c
	@$(DCC)  "$(basename $@).o" $(CFLAGS)   $< > $(DEP_DIR)/$(basename $@).d

# Rules to make DEBUG objects from source. Note for programs, we give the
# objects funny names while for libraries only the library has a funny name.
%_d.o : %.cpp
	$(CXX) -c $(CXXFLAGS) $< $(OUTPUT_OPTION)
%_d.o : %.cc
	$(CXX) -c $(CXXFLAGS) $< $(OUTPUT_OPTION)
%_d.o : %.cxx
	$(CXX) -c $(CXXFLAGS) $< $(OUTPUT_OPTION)
%_d.o : %.c
	$(CC)  -c $(CFLAGS)   $< $(OUTPUT_OPTION)

# Include platform specific definitions
# (the "-" at the front means don't error if the file doesn't exist)
-include $(BMS_HOME)/Makefile.$(BMS_OS)
-include $(BMS_HOME)/Makefile.$(BMS_ARCH)
-include $(BMS_HOME)/Makefile.$(BMS_OSNAME)

# This needs to come after OS makefiles so OPTIMIZE_PREFIX is defined.
# Don't optimize if debugging.
ifdef DEBUG
  DEBUG_SUFFIX = _d
  CFLAGS   += -g
  CXXFLAGS += -g
  LDFLAGS  += -g
else
  ifdef OPTIMIZE
    # check to make sure optimize = 1,2, or 3 if it is defined
    ifneq ($(OPTIMIZE), 1)
      ifneq ($(OPTIMIZE), 2)
        ifneq ($(OPTIMIZE), 3)
          $(error "OPTIMIZE must = 1,2,or 3")
        endif
      endif
    endif
    CFLAGS   += -$(OPTIMIZE_PREFIX)O$(OPTIMIZE)
    CXXFLAGS += -$(OPTIMIZE_PREFIX)O$(OPTIMIZE)
  endif
endif

LD_DIRS += $(addprefix -L,$(LIB_DIRS))
LD_LIBS += $(addsuffix $(DEBUG_SUFFIX),$(addprefix -l,$(ADDITIONAL_MODULES)))

# Include all dependancy files (strip gets rid of leading & trailing whitespace
# and single-space separates the list)
ifneq ($(strip $(DEPS)),)
  -include $(foreach s,$(DEPS),$(DEP_DIR)/$s)
endif


# target to print out the whole environment
env:
	@echo CC            = $(CC)
	@echo CXX           = $(CXX)
	@echo CFLAGS        = $(CFLAGS)
	@echo CXXFLAGS      = $(CXXFLAGS)
	@echo CPPFLAGS      = $(CPPFLAGS)
	@echo LD            = $(LD)
	@echo LDFLAGS       = $(LDFLAGS)
	@echo LD_LIBS       = $(LD_LIBS)
	@echo LD_DIRS       = $(LD_DIRS)
	@echo LD_SO_FLAGS   = $(LD_SO_FLAGS)
	@echo ""
	@echo BMS_OSNAME    = $(BMS_OSNAME)
	@echo MISC_LIBS     = $(MISC_LIBS)
	@echo DEBUG         = $(DEBUG)
	@echo DEBUG_SUFFIX  = $(DEBUG_SUFFIX)
	@echo OPTIMIZE      = $(OPTIMIZE)
	@echo TOPLEVEL      = $(TOPLEVEL)
	@echo ""
	@echo LIBS          = $(LIBS)
	@echo OBJS          = $(OBJS)
	@echo DOBJS         = $(DOBJS)
	@echo LINK_OBJS     = $(LINK_OBJS)
	@echo NO_DEP_OBJS   = $(NO_DEP_OBJS)
	@echo DEPS          = $(DEPS)
	@echo CSRC          = $(CSRC)
	@echo CXXSRC        = $(CXXSRC)
	@echo ""
	@echo SHLIB_NAME    = $(SHLIB_NAME)
	@echo LIB_NAME      = $(LIB_NAME)
	@echo LIBNAME       = $(LIBNAME)        
	@echo LIB_DIR       = $(LIB_DIR)
	@echo OBJ_DIR       = $(OBJ_DIR)
	@echo DEP_DIR       = $(DEP_DIR)
	@echo VPATH         = $(VPATH)
	@echo ""
	@echo MODULE_NAME   = $(MODULE_NAME)
	@echo MODULES       = $(MODULES)
	@echo MAIN          = $(MAIN)
	@echo MAIN_FILES    = $(MAIN_FILES)
	@echo NO_MAIN_FILES = $(NO_MAIN_FILES)
	@echo EXE_NAMES     = $(EXE_NAMES)
	@echo EXE_PATHNAMES = $(EXE_PATHNAMES)
	@echo OTHER_TARGETS = $(OTHER_TARGETS)
	@echo ""
	@echo CODA_HOME     = $(CODA_HOME)
	@echo INSTALL_DIR   = $(INSTALL_DIR)
	@echo PACKAGES      = $(PACKAGES)
	@echo PACKAGE_MAKEFILES = $(PACKAGE_MAKEFILES)
	@echo CODA_USE64BITS    = $(CODA_USE64BITS)
	@echo ""
	@echo ""
