mnvruncontrol -- the MINERvA run control
==================================================================
  Original author:               J. Wolcott  (jwolcott@fnal.gov)
  Last revision:                 v5r6p2  (April 2012)
  Last update to this document:  April 2, 2012
==================================================================

This document briefly describes the configuration and usage of the MINERvA run
control software contained in this package.  More extensive documentation on
its usage in the control room is maintained on the MINERvA wiki at the
following URLs (from the MINERvA detector manual):

  http://substitute.pas.rochester.edu/mediawiki/index.php?title=Basic_Control_Room_Operation_of_the_Linux_DAQ#Using_the_Run_Control
  http://substitute.pas.rochester.edu/mediawiki/index.php?title=Details_of_the_Linux_Run_Control

Contents:
 (1) Installation prerequisites
 (2) Configuration
 (3) Usage notes
 (4) Hacking the run control

1. PREREQUISITES
  * Python >=2.6.2 but < 3.0 
    mnvruncontrol is a Python application.  It requires a Python 2 version
    >= 2.6.2 (but it isn't Python-3.0 compatible).  If you need to install
    Python, visit www.python.org.
  
  * wxPython >= 2.8.10 (for front-end components)
    The graphical framework of mnvruncontrol (and some of its event model)
    depends heavily on the Python implementation of wxWidgets.  You can get
    wxPython from www.wxpython.org.
  
  * pySerial >= 2.4 (only when light injection is needed)
    The light injection boxes use an RS-232 (i.e., serial) interface.  The best
    Python serial library I found (there isn't one built in, strangely) is
    pySerial, which you can get from pyserial.sourceforge.net.  Follow its
    instructions to install either in the default location or in a location
    that you include in the environment variable $PYTHONPATH.

  * MINERvA DAQ software
    Since mnvruncontrol is designed to stitch together the parts of the MINERvA
    DAQ, you will need to have a recent version of mnvdaq installed and properly
    configured.  See its README files for instructions on how to build/configure
    it.
    
  * MINERvA slow control software (readout nodes only)
    For proper configuration of readout nodes, a recent version of
    mnvconfigurator/SlowControl should be installed (as well as the __init__.py
    that lives in the mnvconfigurator root).  Its installation location must
    be included in the $PYTHONPATH environment variable (on the readout nodes).
    
  Once you have all of these you should be able to install the mnvruncontrol
  folder anywhere you like (but see the first bullet under section 2 below).
  
2. CONFIGURATION
  * For the application to work as designed, you MUST include the folder into
    which you install mnvruncontrol as part of the $PYTHONPATH environment
    variable.  For example, if the folder containing the run control files is
       /work/software/mnvruncontrol,
    you must add 
       /work/software
    to the $PYTHONPATH.
    Also note that the folder that contains this README as well as the other
    files must be named "mnvruncontrol".
    
    DO NOT SKIP THIS STEP OR THE RUN CONTROL WILL NOT WORK.
    
  * The run control is fairly configurable, but it will want to store its root
    configuration file in a folder called "/work/conditions".  If such a folder
    does not exist, you have a choice: (a) create it, (b) edit the file
    backend/Defaults.py and change the variables CONFIG_DB_LOCATION and
    CONFIG_DB_NAME to suit your preferences, (c) set the environment variable
    RC_CONFIG_PATH to the full path to the file you would like to use (be sure
    it is set at every invocation!) or (d) pass the option 
    "-c <config_file_full_path>" at each invocation.
    
    For your sanity I recommend either option (a) or (b).
    
  * The DataAcquisitionManager, ReadoutDispatcher, and MonitorDispatcher all
    depend on the DAQ, so they expect a certain set of parameters set by the
    DAQ to be in their environment ($DAQROOT, $ETHOME, etc.) when started.  
    This environment can be obtained by sourcing the script 'setupdaqenv.sh',
    which lives in the mnvdaq package.  You should do this before starting any
    of these dispatchers, or they will complain vociferously.
  
  * Most other configuration of the run control can be done through the program
    RunControlConfiguration.py, which lives in mnvruncontrol/frontend.  You
    should always run this script at first installation of the run control.
    
    Documentation for it can be found in the file README.CONFIGURATION.
    
    
3. OVERVIEW AND USAGE NOTES
    The run control is built on a "client-server" model.  There is a "server"
    backend, which is run on the master DAQ machine (the "queen" node, in multi-
    node readout, or of course the only node in single-node mode).  This process
    oversees the activity of the DAQ itself and should rarely (if ever) need to
    be directly manipulated once started.  In turn, each remote node--whether it
    supports a readout process (the "soldier" and "worker" DAQ nodes), an online
    monitoring system, or something else--runs a so-called "dispatcher"
    customized for its job that communicates with the main server described
    above.  (Hereafter I will refer to the main server as the "DAQ manager.")
    Again, this activity is intended to be automatic and should need little (if
    any) user intervention once the dispatcher has been started.
    
    The "client" for all of this is the graphical run control frontend.  It
    connects to the DAQ manager over a network socket to give it what
    instructions it needs (e.g., starting or stopping runs, setting the run
    configuration, etc.).  Multiple frontends can be run at the same time on
    different machines (or possibly even the same one, though this is risky);
    however, only one can be "in control" of the DAQ at any given time.  There
    is no authentication agent built in to the run control (instead, access to
    the DAQ is limited by SSH and firewall access controls), so any client who
    is able to connect can assume control.
  
  * To start and use the run control, the dispatchers on any remote nodes
    (readout, monitoring, etc.) must first be started.  After they are all
    ready, the DAQ manager can be started on the master node.  Finally, once
    that is up and running, the user may start the run control frontend on his
    or her local machine by executing RunControl.py from the frontend/ folder
    of the mnvruncontrol package.  
  
  * Most errors that the run control might encounter are handled via its "alert"
    subsystem (which presents the user with an annoying display in place of the
    normal front panel).  Nevertheless, occasionally the RC crashes in such
    a way that the error wasn't caught; in these cases, a "traceback" will be
    printed out to the console from which the RC was started.  Including the
    traceback in any communication to the maintainer of the code is EXTREMELY
    helpful and is requested as a matter of practice.  The dispatchers also
    maintain log files (the location of which is completely configurable); an
    expert wishing to diagnose some failure should be sure to examine them as
    a first point of entry.

4. HACKING
  For more detailed notes about the guts of the run control, consult the file
  'HACKING' (included in the root of the mnvruncontrol package).

