mnvruncontrol -- the MINERvA run control
========================================
  Original author:  J. Wolcott  (jwolcott@fnal.gov)
  Last revision:    v4r4  (April 2010)
  Last update:      April 12, 2010
========================================

This document briefly describes the configuration and usage of the MINERvA run
control software contained in this package.  More extensive documentation on
its usage in the control room is maintained on the MINERvA wiki at the
following URLs (from the MINERvA detector manual):

  http://substitute.pas.rochester.edu/mediawiki/index.php?title=Basic_Control_Room_Operation_of_the_Linux_DAQ#Using_the_Run_Control
  http://substitute.pas.rochester.edu/mediawiki/index.php?title=Details_of_the_Linux_Run_Control

Contents:
 (1) Installation prerequisites
 (2) Configuration
 (3) Usage notes
 (4) Hacking the run control

1. PREREQUISITES
  * Python >=2.6 but < 3.0 
    mnvruncontrol is a Python application.  It requires a Python 2 version
    >= 2.6 (but it isn't Python-3.0 compatible).  If you need to install
    Python, visit www.python.org.
  
  * wxPython >= 2.8.10
    The graphical framework of mnvruncontrol (and some of its event model)
    depends heavily on the Python implementation of wxWidgets.  You can get
    wxPython from www.wxpython.org.
  
  * pySerial >= 2.4 (only when light injection is needed)
    The light injection box uses an RS-232 (i.e., serial) interface.  The best
    Python serial library I found (there isn't one built in, strangely) is
    pySerial, which you can get from pyserial.sourceforge.net.  Follow its
    instructions to install either in the default location or in a location
    that you include in the environment variable $PYTHONPATH.

  * MINERvA DAQ software
    Since mnvruncontrol is designed to stitch together the parts of the MINERvA
    DAQ, you will need to have a recent version of mnvdaq installed and properly
    configured.  See its README files for instructions on how to build/configure
    it.
    
  * MINERvA slow control software (readout nodes only)
    For proper configuration of readout nodes, a recent version of
    mnvconfigurator/SlowControl should be installed (as well as the __init__.py
    that lives in the mnvconfigurator base).  Its installation location must
    be included in the $PYTHONPATH environment variable.
    
  Once you have all of these you should be able to install the mnvruncontrol
  package anywhere you like (but see the first bullet under section 2 below).
  
2. CONFIGURATION
  * For the application to work as designed, you MUST include the folder into
    which you install mnvruncontrol as part of the $PYTHONPATH environment
    variable.  DO NOT SKIP THIS STEP OR THE RUN CONTROL WILL NOT WORK.
    
  * The run control is fairly configurable, but it will want to store its root
    configuration file in a folder called "/work/conditions".  If such a folder
    does not exist, you have a choice: (a) create it, (b) edit the file
    backend/Defaults.py and change the variables CONFIG_DB_LOCATION and
    CONFIG_DB_NAME to suit your preferences, or (c) place a file with the name
    "run_control_config.db" (it can be empty) in the same directory as any of 
    the run control files you want to run.
    
    For your sanity I recommend option (a) (or if that's not possible, (b)).
    
  * The run control expects a certain set of parameters set by the DAQ to be
    in its environment ($DAQROOT, $ETHOME, etc.) when started.  This environment
    can be obtained by sourcing the script 'setupdaqenv.sh', which lives in the
    mnvdaq package.
  
  * Most other configuration of the run control can be done through the program
    RunControlConfiguration.py, which lives in mnvruncontrol/frontend.


3. USAGE NOTES

4. HACKING
  For more detailed notes about the guts of the run control, consult the file
  'HACKING' (included in the root of the mnvruncontrol package).

