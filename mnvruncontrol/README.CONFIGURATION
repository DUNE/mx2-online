mnvruncontrol -- the MINERvA run control
==================================================================
  Original author:               J. Wolcott  (jwolcott@fnal.gov)
  Last revision:                 v5r5  (June 2011)
  Last update to this document:  January 21, 2011
==================================================================

This document describes the use of the RunControlConfiguration.py program
that is located in the frontend/ directory of the mnvruncontrol package.

Contents:
  (1) Introduction
  (2) Usage
  (3) Special configuration notes

1. INTRODUCTION
    The run control package is designed to be highly customizable since it is
    run on different machines in different configurations.  The maintainance of
    the various parameters can be a chore; therefore, the
    RunControlConfiguration.py was written to categorize & simplify the process
    for non-experts.
    
    It has basically two independent modes of operation:
      (a) wxWidgets-based graphical front-end;
      (b) text-based menus.
    
    (a) is the preferred mode of operation.  If you start the script in an
    environment where the $DISPLAY environment variable is set, it will try to
    use this mode.  Note that you must have wxPython installed and within the
    $PYTHONPATH for this to work.  (See the main README in this package for
    more information on this latter detail.)
    
    (b) is the fallback text mode.  It is much simpler and more inflexible than
    the graphical mode.  It's intended mostly for use on machines running only
    a dispatcher where configuration will happen infrequently and where wxPython
    is unavailable.
    
    This document will concentrate on use of the Configuration script in mode (a).

    Before starting any run control component, you should run this program on
    any node you intend to use the run control on.  All of the various modules
    in the run control that are startable from the command line will use the
    settings in one central configuration file (though of course they ignore
    settings that are irrelevant for them).  Since each node maintains its own
    configuration file, you need to ensure that the settings there are
    appropriate for the node you are running on.

2. USAGE
  (a) SELECTING YOUR INSTALLATION TYPE
    The first time you start the RunControlConfiguration in graphical mode, it
    will present you with a mostly-blank panel that encourages you to select
    the intended use of this installation from the menu.  The panel will then
    show you only the categories of options that are relevant for that use.
    
    For example, if the machine you are installing the run control on will be
    used exclusively as a client (e.g., it is a shift console), you would check
    only the "Front end client" entry on the "Show these options..." menu.  You
    will then see two tabs: "Front end", where you can configure the various
    properties controlling how the graphical program works; and "Log file
    locations", where you'll want to set the "Post office log file name" and
    "Where to put the frontend log file" options to appropriate values.
    
    On the other hand, if the machine is to be used as a readout node, you'll
    check that box, and you'll see five tabs: "General", "Hardware", "Log file
    locations", "Readout nodes", and "Socket setup".  (Maybe not in that order.)
    
    The entries on the "Show these options..." menu aren't mutually exclusive.
    The master node in the main detector DAQ setup, for example, can also be
    used to run the front end; so on that machine, you might check both "Master
    node" and "Front end client", in which case you'll get all the tabs that are
    relevant for both configurations together.  You can also check them one at
    a time if you prefer (in case that minimizes any confusion).
    
    Once you have saved values in the database, the program will remember the
    installation type you selected the next time you start it.

  (b) USING 'EDITABLE' LIST BOXES
    The list boxes in the "General" and "Master node" tabs can be a little
    tricky to figure out.  Once you have added an entry (using the "Add" button,
    of course), you can edit its values by LEFT-clicking once on the placeholder
    text that appears in the row.  If you need to delete a row, RIGHT-click it
    (this should highlight the whole row without attempting to edit any of the
    text in it) and then click the "Delete" button.

  (c) SAVING THE CONFIGURATION
    As mentioned in the main README for this package (section 2, second bullet),
    the configuration database is stored by default in a file called
    /work/conditions/run_control_config.db.  See that documentation if you want
    to store it someplace else.  
    
    When you click "Save", the program will attempt to save the values and then
    exit.  When it does, it will spit out a line in the terminal you used to
    open it announcing where the save file is.  It will look something like:
    
    Wrote configuration to '/work/conditions/run_control_config.db'.
    
    BE SURE TO CHECK FOR THIS LINE!  It is your only indication that the
    configuration was saved.  (If you specified a different save location, then
    this line also will be your opportunity to confirm that the file was saved
    where you want it.)
  
  (d) APPLYING A NEW CONFIGURATION
    Configuration values are read by any run control executable at startup.
    Therefore, if you run the RunControlConfiguration after that, the 
    configuration must be reloaded for it to take effect.  There are several
    ways this can be done:
     * Restarting a process will ALWAYS force it to reload its configuration.
       This is furthermore the ONLY way to reload the configuration for any
       of the graphical programs (the programs in the frontend/ folder of the
       package).
     * Dispatchers (DataAcquisitionManager.py, ReadoutDispatcher.py,
       MonitorDispatcher.py, MTestBeamDispatcher.py) can be told to reload their
       configuration without being restarted.  Simply send them the SIGHUP
       signal:
       
        kill -SIGHUP <process ID of the dispatcher>
    

3. SPECIAL CONFIGURATION NOTES
  In this section I will refer to configuration options as "Tab/Description".
  Thus (for example) the log file location for the front end, which is on the
  "Log file locations" tab under the entry "Where to put the frontend log file",
  I would call "Front end/Where to put the frontend log file".
  
  The options are designed to be as self-descriptive as possible.  Notes for a
  few that need special amplification are below, organized by menu selection.

  (a) Front-end clients
     * If you don't have a sound card installed on your machine, you should set
       "Front end/Interval between alert bells" to 0.  (Otherwise you'll get
       sound card errors.)
     * You should have been assigned a port number to use for "Front end/Frontend
       client listener port".  You can find it in the port_assignments.txt file
       in the mnvruncontrol package.  If you haven't gotten one, please contact
       the maintainer of the run control.
     * Be sure to check the "Frontend/Resource files location", "Log file 
      locations/Where to put the frontend log file", & "Log file locations/Post
      office log file name" options such that they point to directories that
      actually exist on your machine.  The defaults may or may not be sensible.

  (b) Master node
     * The "Master node/Client admin password" should be changed at the first
       available opportunity!
     * The e-mail addresses listed on the "General" tab will be contacted if
       a DAQ subprocess exits with an unexpected exit code AFTER a run has
       finished.  (Shouldn't really ever happen.)  Otherwise they are unused.
     * The "Node types" for "Master node/Nodes to notify when DAQ manager is
       ready" are enumerated in backend/RemoteNode.py.  As of 1/21/11, they are:
         READOUT    = 1
         MONITORING = 2
         MTEST      = 3
         PERIPHERAL = 4
     * The "Node" entry for rows in "Master node/FEBs whose HV thresholds
       shouldn't be checked" MUST match the name given to the node in "Master
       node/Nodes to notify when DAQ manager is ready".
       
   (c) Online monitoring nodes
     * The e-mail addresses listed on the "General" tab will be used under the
       following circumstances:
         - Condor is enabled and the Condor queue is non-functional or becomes
           full.
         - DST production is enabled and a DST finishes processing in less than
           the time specified in "Monitoring nodes/Minimum time DST job must be
           alive".
     * The options "Monitoring nodes/OM Gaudi process 'input file' options
       file", "Monitoring nodes/OM Gaudi process 'input file' options file",
       "Monitoring nodes/Copy target for DSTs created by OM dispatcher" need to
       be changed to the appropriate areas in Bluearc on the production online
       monitoring node.  The defaults are intended to be "safe".
